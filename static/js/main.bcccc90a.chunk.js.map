{"version":3,"sources":["assets/logo.png","services/api.js","components/GlobalCard/index.jsx","services/getRootPath.js","components/CountryCard/index.jsx","components/TimeLine/index.jsx","components/TimeLineCountries/index.jsx","components/PieActiveDeathRecovered/index.jsx","pages/Main/styles.jsx","pages/Main/index.jsx","components/CountryDetailsCard/index.jsx","components/PieTests/index.jsx","pages/Country/index.jsx","components/Header/index.jsx","routes.jsx","App.jsx","index.jsx"],"names":["module","exports","api","axios","create","baseURL","GlobalData","globaldata","nf","Intl","NumberFormat","className","format","cases","todayCases","deaths","todayDeaths","recovered","todayRecovered","active","tests","affectedCountries","critical","rootpath","CountryCard","country","iso2","active_pct","Math","round","recovered_pct","death_pct","ceil","to","src","toLowerCase","alt","style","height","role","width","aria-valuenow","aria-valuemin","aria-valuemax","TimeLine","timeline","timelineDataLoaded","useEffect","timelinedates","timelinedataCases","timelinedataDeaths","timelinedataRecovered","timelinedataActive","Object","keys","forEach","key","push","cav","document","getElementById","getContext","Chart","type","options","tooltips","mode","intersect","legend","labels","fontColor","scales","yAxes","ticks","xAxes","data","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","map","item","id","TimeLineCountries","countries","useState","timelineCountries","setTimelineCountries","chartLoaded","setChartLoaded","undefined","countriesIso","index","a","post","response","loadTopCountriesTimeLine","timelineCountry","timelineCountryNames","length","randColor","floor","random","toString","values","PieCases","HiddenChartonMobile","styled","div","GlobalDataHeader","main","Main","setCountries","globalData","setGlobalData","isPageLoaded","setIsPageLoaded","lastUpdatedSeconds","setLastUpdatedSeconds","updatePageCount","setUpdatePageCount","timelineGlobal","setTimelineGlobal","pieLoaded","setPieLoaded","loadCountryData","get","loadGlobalData","interval","setInterval","clearInterval","then","color","dataMap","CountryDetailsCard","population","Country","countryCode","useParams","country_code","isTimeLineDataLoaded","setIsTimeLineDataLoaded","setCountry","countryTimeline","setCountryTimeline","loadCountryTimeLine","pageLoaded","Header","logo","Routes","path","component","exact","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.bcccc90a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.fa1e2a0b.png\";","import axios from 'axios';\n\nconst apiRoute =\n  process.env.NODE_ENV === 'development'\n    ? 'http://localhost:3333'\n    : 'https://apicoviddashboard.herokuapp.com';\nconst api = axios.create({ baseURL: apiRoute });\n\nexport default api;\n","import React from 'react';\n\nimport './styles.css';\n\nexport default function GlobalData({ globaldata }) {\n  const nf = new Intl.NumberFormat();\n\n  return (\n    <>\n      <h1 className=\"text-center title-components\">Global Data</h1>\n      <article className=\"global-article\">\n        <section className=\"cases\">\n          <div className=\"global-data-title top-color-1\">\n            Cases\n            <span className=\"global-data-numbers color-cases\">\n              {nf.format(globaldata.cases)}\n            </span>\n            New cases today\n            <span className=\"global-data-numbers color-new-case\">\n              {nf.format(globaldata.todayCases)}\n            </span>\n          </div>\n          <div className=\"global-data-title top-color-2\">\n            Deaths\n            <span className=\"global-data-numbers color-death\">\n              {nf.format(globaldata.deaths)}\n            </span>\n            New deaths today\n            <span className=\"global-data-numbers color-new-death\">\n              {nf.format(globaldata.todayDeaths)}\n            </span>\n          </div>\n          <div className=\"global-data-title top-color-3\">\n            Recovered\n            <span className=\"global-data-numbers color-recovered\">\n              {nf.format(globaldata.recovered)}\n            </span>\n            New recoveries today\n            <span className=\"global-data-numbers color-new-recoveries\">\n              {nf.format(globaldata.todayRecovered)}\n            </span>\n          </div>\n          <div className=\"global-data-title top-color-4\">\n            Active cases\n            <span className=\"global-data-numbers color-active\">\n              {nf.format(globaldata.active)}\n            </span>\n            Tests\n            <span className=\"global-data-numbers color-tests\">\n              {nf.format(globaldata.tests)}\n            </span>\n          </div>\n          <div className=\"global-data-title top-color-5\">\n            Countries affected\n            <span className=\"global-data-numbers color-affected\">\n              {nf.format(globaldata.affectedCountries)}\n            </span>\n            Criticals cases\n            <span className=\"global-data-numbers color-critical\">\n              {nf.format(globaldata.critical)}\n            </span>\n          </div>\n        </section>\n        {/* <section>\n                    <button className='btn btn-info' onClick={this.createNotification('info')}>Info</button>\n                    <hr />\n                    <button className='btn btn-success' onClick={this.createNotification('success')}>Success</button>\n                    <hr />\n                    <button className='btn btn-warning' onClick={this.createNotification('warning')}>Warning</button>\n                    <hr />\n                    <button className='btn btn-danger' onClick={this.createNotification('error')}>Error</button>\n                </section> */}\n      </article>\n    </>\n  );\n}\n","const rootpath =\n  process.env.NODE_ENV === 'development' ? '/' : '/Coronavirus-Dashboard/';\nexport default rootpath;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './styles.css';\nimport rootpath from '../../services/getRootPath';\n\nconst nf = new Intl.NumberFormat();\n\nexport default function CountryCard({ country }) {\n  country.iso2 = country.country === 'MS Zaandam' ? 'US' : country.iso2;\n  country.iso2 = country.country === 'Diamond Princess' ? 'US' : country.iso2;\n\n  const active_pct = Math.round((country.active * 100) / country.cases);\n  const recovered_pct = Math.round((country.recovered * 100) / country.cases);\n  const death_pct = Math.ceil((country.deaths * 100) / country.cases);\n\n  return (\n    <div className=\"col-xl-3 col-lg-4\">\n      <Link to={`${rootpath}${country.iso2}`} className=\"unstyled-link\">\n        <article className=\"pais-article\">\n          <figure className=\"flag\">\n            <img\n              src={`https://cdn.u21.io/flags/4x3/${country.iso2.toLowerCase()}.svg`}\n              alt={`flag ${country.country}`}\n            />\n            <figcaption className=\"text-bold font-smaller text-center\">\n              {country.country}\n            </figcaption>\n          </figure>\n          <div className=\"progress shadow\" style={{ height: '7px' }}>\n            <div\n              className=\"progress-bar bg-active\"\n              role=\"progressbar\"\n              style={{ width: `${active_pct}%` }}\n              aria-valuenow={active_pct}\n              aria-valuemin=\"0\"\n              aria-valuemax=\"100\"\n            />\n            <div\n              className=\"progress-bar bg-recovered\"\n              role=\"progressbar\"\n              style={{ width: `${recovered_pct}%` }}\n              aria-valuenow={recovered_pct}\n              aria-valuemin=\"0\"\n              aria-valuemax=\"100\"\n            />\n            <div\n              className=\"progress-bar bg-death\"\n              role=\"progressbar\"\n              style={{ width: `${death_pct}%` }}\n              aria-valuenow={death_pct}\n              aria-valuemin=\"0\"\n              aria-valuemax=\"100\"\n            />\n          </div>\n          <section className=\"cases\">\n            <div>\n              Cases\n              <span className=\"color-cases\">{nf.format(country.cases)}</span>\n              {country.todayCases > 0 && (\n                <span className=\"color-cases new-today\">\n                  + {nf.format(country.todayCases)}\n                </span>\n              )}\n            </div>\n            <div>\n              Deaths\n              <span className=\"color-death\">{nf.format(country.deaths)}</span>\n              {country.todayDeaths > 0 && (\n                <span className=\"color-death new-today\">\n                  + {nf.format(country.todayDeaths)}\n                </span>\n              )}\n            </div>\n            <div>\n              Recovered\n              <span className=\"color-recovered\">\n                {nf.format(country.recovered)}\n              </span>\n              {country.todayRecovered > 0 && (\n                <span className=\"color-recovered new-today\">\n                  + {nf.format(country.todayRecovered)}\n                </span>\n              )}\n            </div>\n            <div>\n              Active Cases\n              <span className=\"color-active\">{nf.format(country.active)}</span>\n            </div>\n          </section>\n        </article>\n      </Link>\n    </div>\n  );\n}\n","import React, { useEffect } from 'react';\nimport * as Chart from 'chart.js';\n\nexport default function TimeLine({ timeline, timelineDataLoaded }) {\n  // Mount graph cases\n  useEffect(() => {\n    if (timelineDataLoaded) {\n      const timelinedates = [];\n      const timelinedataCases = [];\n      const timelinedataDeaths = [];\n      const timelinedataRecovered = [];\n      const timelinedataActive = [];\n\n      Object.keys(timeline.cases).forEach(key => {\n        timelinedates.push(key);\n        timelinedataCases.push(timeline.cases[key]);\n      });\n\n      Object.keys(timeline.deaths).forEach(key => {\n        timelinedataDeaths.push(timeline.deaths[key]);\n      });\n\n      Object.keys(timeline.recovered).forEach(key => {\n        timelinedataRecovered.push(timeline.recovered[key]);\n      });\n\n      Object.keys(timeline.cases).forEach(key => {\n        timelinedataActive.push(\n          timeline.cases[key] -\n            (timeline.deaths[key] + timeline.recovered[key]),\n        );\n      });\n\n      const cav = document.getElementById('cav_cases').getContext('2d');\n      new Chart(cav, {\n        type: 'line',\n        options: {\n          tooltips: {\n            mode: 'index',\n            intersect: false,\n          },\n          legend: {\n            labels: {\n              fontColor: 'white',\n            },\n          },\n          scales: {\n            yAxes: [\n              {\n                ticks: {\n                  fontColor: 'white',\n                },\n              },\n            ],\n            xAxes: [\n              {\n                ticks: {\n                  fontColor: 'white',\n                },\n              },\n            ],\n          },\n        },\n        data: {\n          labels: timelinedates,\n          datasets: [\n            {\n              label: 'Total Cases',\n              fill: false,\n              lineTension: 0.1,\n              backgroundColor: 'rgba(14, 233, 203,0.4)',\n              borderColor: '#0ee9cb',\n              borderCapStyle: 'butt',\n              borderDash: [],\n              borderDashOffset: 0.0,\n              borderJoinStyle: 'miter',\n              pointBorderColor: '#0ee9cb',\n              pointBackgroundColor: '#0ee9cb',\n              pointBorderWidth: 1,\n              pointHoverRadius: 5,\n              pointHoverBackgroundColor: '#0ee9cb',\n              pointHoverBorderColor: 'rgba(220,220,220,1)',\n              pointHoverBorderWidth: 2,\n              pointRadius: 2,\n              pointHitRadius: 2,\n              data: timelinedataCases.map(item => item),\n            },\n            {\n              label: 'Total Recovered',\n              fill: false,\n              lineTension: 0.1,\n              backgroundColor: 'rgba(52, 127, 213,0.4)',\n              borderColor: '#347fd5',\n              borderCapStyle: 'butt',\n              borderDash: [],\n              borderDashOffset: 0.0,\n              borderJoinStyle: 'miter',\n              pointBorderColor: '#347fd5',\n              pointBackgroundColor: '#347fd5',\n              pointBorderWidth: 1,\n              pointHoverRadius: 5,\n              pointHoverBackgroundColor: '#347fd5',\n              pointHoverBorderColor: 'rgba(220,220,220,1)',\n              pointHoverBorderWidth: 2,\n              pointRadius: 2,\n              pointHitRadius: 2,\n              data: timelinedataRecovered.map(item => item),\n            },\n            {\n              label: 'Total Deaths',\n              fill: false,\n              lineTension: 0.1,\n              backgroundColor: 'rgba(243, 83, 83,0.4)',\n              borderColor: '#f35353',\n              borderCapStyle: 'butt',\n              borderDash: [],\n              borderDashOffset: 0.0,\n              borderJoinStyle: 'miter',\n              pointBorderColor: '#f35353',\n              pointBackgroundColor: '#f35353',\n              pointBorderWidth: 1,\n              pointHoverRadius: 5,\n              pointHoverBackgroundColor: '#f35353',\n              pointHoverBorderColor: 'rgba(220,220,220,1)',\n              pointHoverBorderWidth: 2,\n              pointRadius: 2,\n              pointHitRadius: 2,\n              data: timelinedataDeaths.map(item => item),\n            },\n            {\n              label: 'Active cases',\n              fill: false,\n              lineTension: 0.1,\n              backgroundColor: 'rgba(255,193,55,0.4)',\n              borderColor: '#ffc137',\n              borderCapStyle: 'butt',\n              borderDash: [],\n              borderDashOffset: 0.0,\n              borderJoinStyle: 'miter',\n              pointBorderColor: '#ffc137',\n              pointBackgroundColor: '#ffc137',\n              pointBorderWidth: 1,\n              pointHoverRadius: 5,\n              pointHoverBackgroundColor: '#ffc137',\n              pointHoverBorderColor: 'rgba(220,220,220,1)',\n              pointHoverBorderWidth: 2,\n              pointRadius: 2,\n              pointHitRadius: 2,\n              data: timelinedataActive.map(item => item),\n            },\n          ],\n        },\n      });\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [timelineDataLoaded]);\n\n  return (\n    <>\n      <h2>Timeline cases and deaths</h2>\n      <canvas className=\"mt-4\" height=\"164px\" id=\"cav_cases\" />\n    </>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport * as Chart from 'chart.js';\nimport api from '../../services/api';\n\nexport default function TimeLineCountries({ countries }) {\n  const [timelineCountries, setTimelineCountries] = useState();\n  const [chartLoaded, setChartLoaded] = useState(false);\n\n  useEffect(() => {\n    // console.log(countries)\n    if (countries[0] !== undefined) {\n      const countriesIso = [];\n\n      for (let index = 0; index < 5; index++) {\n        countriesIso.push(countries[index].iso2);\n      }\n\n      const loadTopCountriesTimeLine = async () => {\n        const response = await api.post(\n          '/top_countries_timeline',\n          countriesIso,\n        );\n        setTimelineCountries(response.data);\n        setChartLoaded(true);\n      };\n\n      loadTopCountriesTimeLine();\n    }\n  }, [countries]);\n\n  // Mount graph cases\n  useEffect(() => {\n    if (timelineCountries && chartLoaded === false) {\n      const timelinedates = [];\n      const timelineCountry = [];\n      const timelineCountryNames = [];\n      const datasets = [];\n\n      Object.keys(timelineCountries[0].timeline.cases).forEach(key => {\n        timelinedates.push(key);\n      });\n\n      for (let index = 0; index < timelineCountries.length; index++) {\n        timelineCountryNames.push(timelineCountries[index].country);\n        timelineCountry.push(timelineCountries[index].timeline.cases);\n\n        const randColor = `#${Math.floor(Math.random() * 16777215).toString(\n          16,\n        )}`;\n        datasets.push({\n          label: timelineCountryNames[index],\n          fill: false,\n          lineTension: 0.1,\n          borderColor: randColor,\n          borderCapStyle: 'butt',\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: 'miter',\n          pointBorderColor: randColor,\n          pointBackgroundColor: randColor,\n          pointBorderWidth: 1,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: randColor,\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\n          pointHoverBorderWidth: 2,\n          pointRadius: 2,\n          pointHitRadius: 2,\n          data: Object.values(timelineCountry[index]).map(item => item),\n        });\n      }\n\n      const cav = document\n        .getElementById('cav_cases_top_countries')\n        .getContext('2d');\n      new Chart(cav, {\n        type: 'line',\n        options: {\n          tooltips: {\n            mode: 'index',\n            intersect: false,\n          },\n          legend: {\n            labels: {\n              fontColor: 'white',\n            },\n          },\n          scales: {\n            yAxes: [\n              {\n                ticks: {\n                  fontColor: 'white',\n                },\n              },\n            ],\n            xAxes: [\n              {\n                ticks: {\n                  fontColor: 'white',\n                },\n              },\n            ],\n          },\n        },\n        data: {\n          labels: timelinedates,\n          datasets,\n        },\n      });\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [timelineCountries, chartLoaded]);\n\n  return (\n    <>\n      <h2>Timeline cases from top 5 countries</h2>\n      <canvas className=\"mt-4\" height=\"164px\" id=\"cav_cases_top_countries\" />\n    </>\n  );\n}\n","import React, { useEffect } from 'react';\nimport * as Chart from 'chart.js';\n\nexport default function PieCases({\n  data,\n  timelineDataLoaded,\n  country = 'Global',\n}) {\n  // Mount pie cases\n  useEffect(() => {\n    if (timelineDataLoaded) {\n      const cav = document.getElementById(`pie_cases`).getContext('2d');\n      new Chart(cav, {\n        type: 'pie',\n        options: {\n          legend: {\n            labels: {\n              fontColor: 'white',\n            },\n          },\n        },\n        data: {\n          labels: ['Active', 'Recovered', 'Death'],\n          datasets: [\n            {\n              backgroundColor: ['#ffc137', '#347fd5', '#f35353'],\n              data: [data.active, data.recovered, data.deaths],\n            },\n          ],\n        },\n      });\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [timelineDataLoaded]);\n\n  return (\n    <>\n      <h2>{country} active, deaths and recovered</h2>\n      <canvas className=\"mt-4\" id=\"pie_cases\" />\n    </>\n  );\n}\n","import styled from 'styled-components';\n\nexport const HiddenChartonMobile = styled.div`\n  @media all and (max-width: 499px) {\n    display: none !important;\n  }\n`;\n\nexport const GlobalDataHeader = styled.main`\n  .charts {\n    section {\n      box-shadow: 0.2rem 1rem 0.65rem rgba(0, 0, 0, 0.342);\n    }\n  }\n  @media all and (min-width: 700px) and (max-width: 1499px) {\n    .charts {\n      div {\n        display: flex;\n        flex-wrap: wrap;\n        justify-content: center;\n        section {\n          margin: 1rem;\n          flex: 1 50%;\n          max-width: 47%;\n        }\n      }\n    }\n  }\n\n  @media all and (min-width: 1500px) {\n    display: flex;\n    .global-data {\n      flex: 0 0 25%;\n      max-width: 25%;\n    }\n    .charts {\n      flex: 0 0 75%;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      div {\n        width: 60%;\n      }\n    }\n  }\n`;\n","import React, { useEffect, useState } from 'react';\nimport { NotificationContainer } from 'react-notifications';\n// NotificationManager\nimport 'react-notifications/lib/notifications.css';\nimport Loading from 'react-loading';\n\nimport api from '../../services/api';\n\nimport GlobalCard from '../../components/GlobalCard';\nimport CountryCard from '../../components/CountryCard';\nimport TimeLine from '../../components/TimeLine';\nimport TimeLineCountries from '../../components/TimeLineCountries';\nimport PieCases from '../../components/PieActiveDeathRecovered';\n\nimport { GlobalDataHeader, HiddenChartonMobile } from './styles';\n\nexport default function Main() {\n  const [countries, setCountries] = useState([]);\n  const [globalData, setGlobalData] = useState([]);\n  const [isPageLoaded, setIsPageLoaded] = useState(false);\n  const [lastUpdatedSeconds, setLastUpdatedSeconds] = useState(0);\n  const [updatePageCount, setUpdatePageCount] = useState(0);\n  const [timelineGlobal, setTimelineGlobal] = useState();\n  const [chartLoaded, setChartLoaded] = useState(false);\n  const [pieLoaded, setPieLoaded] = useState(false);\n\n  // Get Country Data\n  useEffect(() => {\n    const loadCountryData = async () => {\n      const response = await api.get(`/countries`);\n\n      response.data = Object.values(response.data);\n\n      setCountries(response.data);\n      setChartLoaded(false);\n    };\n\n    const loadGlobalData = async () => {\n      const response = await api.get(`/global`);\n      setGlobalData(response.data);\n      setChartLoaded(false);\n      setPieLoaded(true);\n    };\n    loadCountryData();\n    loadGlobalData();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [updatePageCount]);\n\n  useEffect(() => {\n    let interval = null;\n    if (isPageLoaded) {\n      interval = setInterval(() => {\n        setLastUpdatedSeconds(lastUpdatedSeconds => lastUpdatedSeconds + 1);\n        if (lastUpdatedSeconds % 10 === 0 && lastUpdatedSeconds !== 0) {\n          setUpdatePageCount(updatePageCount => updatePageCount + 1);\n          setLastUpdatedSeconds(0);\n        }\n      }, 1000);\n    }\n\n    return () => clearInterval(interval);\n  }, [isPageLoaded, lastUpdatedSeconds]);\n\n  useEffect(() => {\n    api.get(`/global_timeline`).then(response => {\n      setTimelineGlobal(response.data);\n      setIsPageLoaded(true);\n      setChartLoaded(true);\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return isPageLoaded === false ? (\n    <div className=\"loading\">\n      <Loading type=\"bars\" color=\"#eee\" />\n    </div>\n  ) : (\n    <div className=\"container-fluid\">\n      <NotificationContainer />\n      <GlobalDataHeader>\n        <div className=\"global-data\">\n          <GlobalCard globaldata={globalData} />\n        </div>\n\n        <div className=\"charts\">\n          <HiddenChartonMobile>\n            <section className=\"chart-div\">\n              <TimeLine\n                timeline={timelineGlobal}\n                timelineDataLoaded={chartLoaded}\n              />\n            </section>\n            <section className=\"chart-div\">\n              <TimeLineCountries countries={countries} />\n            </section>\n            <section className=\"chart-div\">\n              <PieCases data={globalData} timelineDataLoaded={pieLoaded} />\n            </section>\n          </HiddenChartonMobile>\n        </div>\n      </GlobalDataHeader>\n\n      <div className=\"row justify-content-md-center\">\n        <div className=\"col-12\">\n          <h1 className=\"text-center text-white title-components\">\n            Countries Data\n          </h1>\n        </div>\n        {countries.map(dataMap => (\n          <CountryCard key={dataMap.country} country={dataMap} />\n        ))}\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport './styles.css';\n\nconst nf = new Intl.NumberFormat();\n\nexport default function CountryDetailsCard({ country }) {\n  country.iso2 = country.country === 'MS Zaandam' ? 'US' : country.iso2;\n  country.iso2 = country.country === 'Diamond Princess' ? 'US' : country.iso2;\n\n  return (\n    <article className=\"pais-details-article\">\n      <figure className=\"flag\">\n        <img\n          src={`https://cdn.u21.io/flags/4x3/${country.iso2.toLowerCase()}.svg`}\n          alt={`flag ${country.country}`}\n        />\n        <figcaption>{country.country}</figcaption>\n      </figure>\n      <section className=\"cases\">\n        <div>\n          Cases\n          <span className=\"country-data-numbers color-cases\">\n            {nf.format(country.cases)}\n          </span>\n          New Cases Today\n          <span className=\"country-data-numbers color-new-case\">\n            {nf.format(country.todayCases)}\n          </span>\n        </div>\n        <div>\n          Deaths\n          <span className=\"country-data-numbers color-death\">\n            {nf.format(country.deaths)}\n          </span>\n          New Deaths Today\n          <span className=\"country-data-numbers color-new-death\">\n            {nf.format(country.todayDeaths)}\n          </span>\n        </div>\n        <div>\n          Recovered\n          <span className=\"country-data-numbers color-recovered\">\n            {nf.format(country.recovered)}\n          </span>\n          New Recovered Today\n          <span className=\"country-data-numbers color-new-recoveries\">\n            {nf.format(country.todayRecovered)}\n          </span>\n        </div>\n        <div>\n          Active Cases\n          <span className=\"country-data-numbers color-active\">\n            {nf.format(country.active)}\n          </span>\n          Tests\n          <span className=\"country-data-numbers color-tests\">\n            {nf.format(country.tests)}\n          </span>\n        </div>\n        <div>\n          Population\n          <span className=\"country-data-numbers color-affected\">\n            {nf.format(country.population)}\n          </span>\n          Critical\n          <span className=\"country-data-numbers color-critical\">\n            {nf.format(country.critical)}\n          </span>\n        </div>\n      </section>\n    </article>\n  );\n}\n","import React, { useEffect } from 'react';\nimport * as Chart from 'chart.js';\n\nexport default function PieCases({ data, timelineDataLoaded }) {\n  // Mount pie tests\n  useEffect(() => {\n    if (timelineDataLoaded) {\n      const cav = document.getElementById(`pie_tests`).getContext('2d');\n      new Chart(cav, {\n        type: 'pie',\n        options: {\n          legend: {\n            labels: {\n              fontColor: 'white',\n            },\n          },\n        },\n        data: {\n          labels: [`${data.country} population`, 'Tests'],\n          datasets: [\n            {\n              backgroundColor: [\n                // \"#3e95cd\",\n                '#da8213',\n                '#6bfb31',\n              ],\n              data: [\n                // globalData.population,\n                data.population,\n                data.tests,\n              ],\n            },\n          ],\n        },\n      });\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [timelineDataLoaded]);\n\n  return (\n    <>\n      <h2>{data.country} Population / Tests</h2>\n      <canvas className=\"mt-4\" id=\"pie_tests\" />\n    </>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Loading from 'react-loading';\nimport api from '../../services/api';\n\nimport CountryData from '../../components/CountryDetailsCard';\nimport TimeLine from '../../components/TimeLine';\nimport PieCases from '../../components/PieActiveDeathRecovered';\nimport PieTests from '../../components/PieTests';\n\nimport './style.css';\n\nexport default function Country() {\n  const { country_code: countryCode } = useParams();\n  const [isPageLoaded, setIsPageLoaded] = useState(false);\n  const [isTimeLineDataLoaded, setIsTimeLineDataLoaded] = useState(false);\n  const [country, setCountry] = useState([]);\n  const [countryTimeline, setCountryTimeline] = useState([]);\n\n  // Get Country Timeline\n  useEffect(() => {\n    const loadCountryTimeLine = async () => {\n      const response = await api.get(`/country_timeline/${countryCode}`);\n      setCountryTimeline(response.data.timeline);\n      setIsTimeLineDataLoaded(true);\n    };\n\n    loadCountryTimeLine();\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Get Country Data\n  useEffect(() => {\n    const loadCountryData = async () => {\n      const response = await api.get(`/country/${countryCode}`);\n      setCountry(response.data);\n      setIsPageLoaded(true);\n    };\n\n    loadCountryData();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return !isPageLoaded ? (\n    <div className=\"loading\">\n      <Loading type=\"bars\" color=\"#eee\" />\n    </div>\n  ) : (\n    <div className=\"container-fluid\">\n      <div className=\"row\">\n        <div className=\"col-12\">\n          <CountryData country={country} />\n        </div>\n        <div className=\"col-8\">\n          <section className=\" chart-div\">\n            <TimeLine\n              timeline={countryTimeline}\n              timelineDataLoaded={isTimeLineDataLoaded}\n            />\n          </section>\n        </div>\n        <div className=\"col-4\">\n          <div className=\"col-12\">\n            <section className=\"chart-div\">\n              <PieCases\n                data={country}\n                timelineDataLoaded={isTimeLineDataLoaded}\n                country={country.country}\n                pageLoaded={isPageLoaded}\n              />\n            </section>\n          </div>\n          <div className=\"col-12\">\n            <section className=\"chart-div\">\n              <PieTests\n                data={country}\n                timelineDataLoaded={isTimeLineDataLoaded}\n              />\n            </section>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './styles.css';\nimport rootpath from '../../services/getRootPath';\n\nimport logo from '../../assets/logo.png';\n\nconst Header = () => (\n  <div id=\"main-header\">\n    <Link to={rootpath} className=\"title-brand\">\n      <img src={logo} alt=\"Covid Dashboard\" className=\"logo\" />\n      DASHBOARD\n      <div className=\"blob red\" />\n    </Link>\n    <nav className=\"my-2 my-md-0 mr-md-3\">\n      <Link to={rootpath} className=\"p-2 text-white\">\n        Features\n      </Link>\n    </nav>\n    {/* <a class=\"btn btn-outline-primary\" href=\"#\">Sign up</a> */}\n  </div>\n);\n\nexport default Header;\n","import React from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\n\nimport Main from './pages/Main';\nimport Country from './pages/Country';\nimport Header from './components/Header';\n\nimport rootpath from './services/getRootPath';\n\nexport default function Routes() {\n  return (\n    <BrowserRouter>\n      <Route path={rootpath} component={Header} />\n      <Route exact path={rootpath} component={Main} />\n      <Route exact path={`${rootpath}:country_code`} component={Country} />\n    </BrowserRouter>\n  );\n}\n","import React from 'react';\nimport Routes from './routes';\n\nimport './styles.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nconst App = () => (\n  <div className=\"App\">\n    <Routes />\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}