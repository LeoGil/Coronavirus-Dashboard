{"version":3,"sources":["assets/logo.png","services/api.js","components/GlobalCard/index.jsx","services/getRootPath.js","components/CountryCard/index.jsx","pages/Main/index.jsx","components/CountryDetailsCard/index.jsx","pages/Country/index.jsx","components/Header/index.jsx","routes.jsx","App.jsx","index.jsx"],"names":["module","exports","api","axios","create","baseURL","GlobalData","globaldata","nf","Intl","NumberFormat","className","format","cases","todayCases","deaths","todayDeaths","recovered","todayRecovered","active","tests","affectedCountries","critical","rootpath","CountryCard","country","iso2","to","src","toLowerCase","alt","Main","useState","countries","setCountries","globalData","setGlobalData","isPageLoaded","setIsPageLoaded","lastUpdatedSeconds","setLastUpdatedSeconds","updatePageCount","setUpdatePageCount","timelineGlobal","setTimelineGlobal","chartLoaded","setChartLoaded","useEffect","loadCountryData","a","get","response","data","Object","values","loadGlobalData","interval","setInterval","clearInterval","then","timelinedates","timelinedataCases","timelinedataDeaths","timelinedataRecovered","keys","forEach","key","push","cav","document","getElementById","getContext","Chart","type","options","tooltips","mode","intersect","legend","labels","fontColor","scales","yAxes","ticks","xAxes","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","map","item","cavPie","color","height","id","dataMap","CountryDetailsCard","population","Country","countryCode","useParams","country_code","isTimeLineDataLoaded","setIsTimeLineDataLoaded","setCountry","countryTimeline","setCountryTimeline","timeline","loadCountryTimeLine","timelinedata","Header","logo","Routes","path","component","exact","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.ee6b5176.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.fa1e2a0b.png\";","import axios from 'axios';\n\nconst apiRoute =\n  process.env.NODE_ENV === 'development'\n    ? 'http://localhost:3333'\n    : 'https://apicoviddashboard.herokuapp.com';\nconst api = axios.create({ baseURL: apiRoute });\n\nexport default api;\n","import React from 'react';\n\nimport './styles.css';\n\nexport default function GlobalData({ globaldata }) {\n  const nf = new Intl.NumberFormat();\n\n  return (\n    <>\n      <h1 className=\"text-center title-components\">Global Data</h1>\n      <article className=\"global-article\">\n        <section className=\"cases\">\n          <div className=\"global-data-title t1\">\n            Cases\n            <span className=\"global-data-numbers color-cases\">\n              {nf.format(globaldata.cases)}\n            </span>\n            New cases today\n            <span className=\"global-data-numbers color-new-case\">\n              {nf.format(globaldata.todayCases)}\n            </span>\n          </div>\n          <div className=\"global-data-title t2\">\n            Deaths\n            <span className=\"global-data-numbers color-death\">\n              {nf.format(globaldata.deaths)}\n            </span>\n            New deaths today\n            <span className=\"global-data-numbers color-new-death\">\n              {nf.format(globaldata.todayDeaths)}\n            </span>\n          </div>\n          <div className=\"global-data-title t3\">\n            Recovered\n            <span className=\"global-data-numbers color-recovered\">\n              {nf.format(globaldata.recovered)}\n            </span>\n            New recoveries today\n            <span className=\"global-data-numbers color-new-recoveries\">\n              {nf.format(globaldata.todayRecovered)}\n            </span>\n          </div>\n          <div className=\"global-data-title t4\">\n            Active cases\n            <span className=\"global-data-numbers color-active\">\n              {nf.format(globaldata.active)}\n            </span>\n            <span className=\"global-data-numbers color-tests\">\n              {nf.format(globaldata.tests)}\n            </span>\n          </div>\n          <div className=\"global-data-title t5\">\n            Countries affected\n            <span className=\"global-data-numbers color-affected\">\n              {nf.format(globaldata.affectedCountries)}\n            </span>\n            Criticals\n            <span className=\"global-data-numbers color-critical\">\n              {nf.format(globaldata.critical)}\n            </span>\n          </div>\n        </section>\n        {/* <section>\n                    <button className='btn btn-info' onClick={this.createNotification('info')}>Info</button>\n                    <hr />\n                    <button className='btn btn-success' onClick={this.createNotification('success')}>Success</button>\n                    <hr />\n                    <button className='btn btn-warning' onClick={this.createNotification('warning')}>Warning</button>\n                    <hr />\n                    <button className='btn btn-danger' onClick={this.createNotification('error')}>Error</button>\n                </section> */}\n      </article>\n    </>\n  );\n}\n","const rootpath =\n  process.env.NODE_ENV === 'development' ? '/' : '/Coronavirus-Dashboard/';\nexport default rootpath;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './styles.css';\nimport rootpath from '../../services/getRootPath';\n\nconst nf = new Intl.NumberFormat();\n\nexport default function CountryCard({ country }) {\n  country.iso2 = country.country === 'MS Zaandam' ? 'US' : country.iso2;\n  country.iso2 = country.country === 'Diamond Princess' ? 'US' : country.iso2;\n\n  return (\n    <div className=\"col-lg-4\">\n      <Link to={`${rootpath}${country.iso2}`} className=\"unstyled-link\">\n        <article className=\"pais-article shadow\">\n          <figure className=\"bandeira\">\n            <img\n              className=\"shadow\"\n              src={`https://cdn.u21.io/flags/4x3/${country.iso2.toLowerCase()}.svg`}\n              alt={`Bandeira ${country.country}`}\n            />\n            <figcaption className=\"text-bold font-smaller text-center\">\n              {country.country}\n            </figcaption>\n          </figure>\n          <section className=\"cases\">\n            <div>\n              Cases\n              <span className=\"color-cases\">{nf.format(country.cases)}</span>\n              {country.todayCases > 0 && (\n                <span className=\"color-cases new-today\">\n                  + {nf.format(country.todayCases)}\n                </span>\n              )}\n            </div>\n            <div>\n              Deaths\n              <span className=\"color-death\">{nf.format(country.deaths)}</span>\n              {country.todayDeaths > 0 && (\n                <span className=\"color-death new-today\">\n                  + {nf.format(country.todayDeaths)}\n                </span>\n              )}\n            </div>\n            <div>\n              Recovered\n              <span className=\"color-recovered\">\n                {nf.format(country.recovered)}\n              </span>\n              {country.todayRecovered > 0 && (\n                <span className=\"color-recovered new-today\">\n                  + {nf.format(country.todayRecovered)}\n                </span>\n              )}\n            </div>\n            <div>\n              Active Cases\n              <span className=\"color-active\">{nf.format(country.active)}</span>\n            </div>\n          </section>\n        </article>\n      </Link>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { NotificationContainer } from 'react-notifications';\n// NotificationManager\nimport 'react-notifications/lib/notifications.css';\nimport Loading from 'react-loading';\n\nimport * as Chart from 'chart.js';\nimport api from '../../services/api';\n\nimport GlobalCard from '../../components/GlobalCard';\nimport CountryCard from '../../components/CountryCard';\n\nimport './style.css';\n\nexport default function Main() {\n  const [countries, setCountries] = useState([]);\n  const [globalData, setGlobalData] = useState([]);\n  const [isPageLoaded, setIsPageLoaded] = useState(false);\n  const [lastUpdatedSeconds, setLastUpdatedSeconds] = useState(0);\n  const [updatePageCount, setUpdatePageCount] = useState(0);\n  const [timelineGlobal, setTimelineGlobal] = useState();\n  const [chartLoaded, setChartLoaded] = useState(false);\n\n  // Get Country Data\n  useEffect(() => {\n    const loadCountryData = async () => {\n      const response = await api.get(`/countries`);\n\n      response.data = Object.values(response.data);\n\n      setCountries(response.data);\n      setChartLoaded(false);\n    };\n\n    const loadGlobalData = async () => {\n      const response = await api.get(`/global`);\n      setGlobalData(response.data);\n      setChartLoaded(false);\n    };\n    loadCountryData();\n    loadGlobalData();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [updatePageCount]);\n\n  useEffect(() => {\n    let interval = null;\n    if (isPageLoaded) {\n      interval = setInterval(() => {\n        setLastUpdatedSeconds(lastUpdatedSeconds => lastUpdatedSeconds + 1);\n        if (lastUpdatedSeconds % 10 === 0 && lastUpdatedSeconds !== 0) {\n          setUpdatePageCount(updatePageCount => updatePageCount + 1);\n          setLastUpdatedSeconds(0);\n        }\n      }, 1000);\n    }\n\n    return () => clearInterval(interval);\n  }, [isPageLoaded, lastUpdatedSeconds]);\n\n  useEffect(() => {\n    api.get(`/global_timeline`).then(response => {\n      setTimelineGlobal(response.data);\n      setIsPageLoaded(true);\n      setChartLoaded(true);\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    if (isPageLoaded === true && chartLoaded === true) {\n      const timelinedates = [];\n      const timelinedataCases = [];\n      const timelinedataDeaths = [];\n      const timelinedataRecovered = [];\n\n      Object.keys(timelineGlobal.cases).forEach(key => {\n        timelinedates.push(key);\n        timelinedataCases.push(timelineGlobal.cases[key]);\n      });\n\n      Object.keys(timelineGlobal.deaths).forEach(key => {\n        timelinedataDeaths.push(timelineGlobal.deaths[key]);\n      });\n\n      Object.keys(timelineGlobal.recovered).forEach(key => {\n        timelinedataRecovered.push(timelineGlobal.recovered[key]);\n      });\n\n      const cav = document.getElementById(`global_timeline`).getContext('2d');\n      new Chart(cav, {\n        type: 'line',\n        options: {\n          tooltips: {\n            mode: 'index',\n            intersect: false,\n          },\n          legend: {\n            labels: {\n              fontColor: 'white',\n            },\n          },\n          scales: {\n            yAxes: [\n              {\n                ticks: {\n                  fontColor: 'white',\n                },\n              },\n            ],\n            xAxes: [\n              {\n                ticks: {\n                  fontColor: 'white',\n                },\n              },\n            ],\n          },\n        },\n\n        data: {\n          labels: timelinedates,\n          datasets: [\n            {\n              label: 'Total Cases',\n              fill: false,\n              lineTension: 0.1,\n              backgroundColor: 'rgba(14, 233, 203,0.4)',\n              borderColor: '#0ee9cb',\n              borderCapStyle: 'butt',\n              borderDash: [],\n              borderDashOffset: 0.0,\n              borderJoinStyle: 'miter',\n              pointBorderColor: '#0ee9cb',\n              pointBackgroundColor: '#0ee9cb',\n              pointBorderWidth: 1,\n              pointHoverRadius: 5,\n              pointHoverBackgroundColor: '#0ee9cb',\n              pointHoverBorderColor: 'rgba(220,220,220,1)',\n              pointHoverBorderWidth: 2,\n              pointRadius: 2,\n              pointHitRadius: 5,\n              data: timelinedataCases.map(item => item),\n            },\n            {\n              label: 'Total Recovered',\n              fill: false,\n              lineTension: 0.1,\n              backgroundColor: 'rgba(52, 127, 213,0.4)',\n              borderColor: '#347fd5',\n              borderCapStyle: 'butt',\n              borderDash: [],\n              borderDashOffset: 0.0,\n              borderJoinStyle: 'miter',\n              pointBorderColor: '#347fd5',\n              pointBackgroundColor: '#347fd5',\n              pointBorderWidth: 1,\n              pointHoverRadius: 5,\n              pointHoverBackgroundColor: '#347fd5',\n              pointHoverBorderColor: 'rgba(220,220,220,1)',\n              pointHoverBorderWidth: 2,\n              pointRadius: 2,\n              pointHitRadius: 5,\n              data: timelinedataRecovered.map(item => item),\n            },\n            {\n              label: 'Total Deaths',\n              fill: false,\n              lineTension: 0.1,\n              backgroundColor: 'rgba(243, 83, 83,0.4)',\n              borderColor: '#f35353',\n              borderCapStyle: 'butt',\n              borderDash: [],\n              borderDashOffset: 0.0,\n              borderJoinStyle: 'miter',\n              pointBorderColor: '#f35353',\n              pointBackgroundColor: '#f35353',\n              pointBorderWidth: 1,\n              pointHoverRadius: 5,\n              pointHoverBackgroundColor: '#f35353',\n              pointHoverBorderColor: 'rgba(220,220,220,1)',\n              pointHoverBorderWidth: 2,\n              pointRadius: 2,\n              pointHitRadius: 5,\n              data: timelinedataDeaths.map(item => item),\n            },\n          ],\n        },\n      });\n\n      const cavPie = document.getElementById(`global_area`);\n      new Chart(cavPie, {\n        type: 'pie',\n        data: {\n          labels: [\n            // \"World Population\",\n            'Active',\n            'Recovered',\n            'Death',\n          ],\n          datasets: [\n            {\n              backgroundColor: [\n                // \"#3e95cd\",\n                '#ffc137',\n                '#347fd5',\n                '#f35353',\n              ],\n              data: [\n                // globalData.population,\n                globalData.active,\n                globalData.recovered,\n                globalData.deaths,\n              ],\n            },\n          ],\n        },\n        options: {\n          legend: {\n            labels: {\n              fontColor: 'white',\n            },\n          },\n        },\n      });\n    }\n  }, [isPageLoaded, chartLoaded, timelineGlobal, globalData]);\n\n  return isPageLoaded === false ? (\n    <div className=\"loading\">\n      <Loading type=\"bars\" color=\"#eee\" />\n    </div>\n  ) : (\n    <div className=\"container-fluid\">\n      <NotificationContainer />\n\n      <div className=\"row\">\n        <div className=\"col-8\">\n          <section className=\"chart-div\">\n            <h2 className=\"text-white\">\n              Timeline Global Cases, Deaths and Recovered\n            </h2>\n            <canvas className=\"mt-4\" height=\"120px\" id=\"global_timeline\" />\n          </section>\n        </div>\n        <div className=\"col-4\">\n          <section className=\"chart-div\">\n            <h2 className=\"text-white\">\n              Global Active cases, Deaths and Recovered\n            </h2>\n            <canvas className=\"mt-4\" height=\"120px\" id=\"global_area\" />\n          </section>\n        </div>\n      </div>\n      <GlobalCard globaldata={globalData} />\n\n      <div className=\"row justify-content-md-center\">\n        <div className=\"col-12\">\n          <h1 className=\"text-center text-white title-components\">\n            Countries Data\n          </h1>\n        </div>\n        {countries.map(dataMap => (\n          <CountryCard key={dataMap.country} country={dataMap} />\n        ))}\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport './styles.css';\n\nconst nf = new Intl.NumberFormat();\n\nexport default function CountryDetailsCard({ country }) {\n  country.iso2 = country.country === 'MS Zaandam' ? 'US' : country.iso2;\n  country.iso2 = country.country === 'Diamond Princess' ? 'US' : country.iso2;\n\n  return (\n    <article className=\"pais-details-article\">\n      <figure className=\"bandeira\">\n        <img\n          src={`https://cdn.u21.io/flags/4x3/${country.iso2.toLowerCase()}.svg`}\n          alt={`Bandeira ${country.country}`}\n        />\n        <figcaption>{country.country}</figcaption>\n      </figure>\n      <section className=\"cases\">\n        <div>\n          Cases\n          <span className=\"country-data-numbers color-cases\">\n            {nf.format(country.cases)}\n          </span>\n          New Cases Today\n          <span className=\"country-data-numbers color-new-case\">\n            {nf.format(country.todayCases)}\n          </span>\n        </div>\n        <div>\n          Deaths\n          <span className=\"country-data-numbers color-death\">\n            {nf.format(country.deaths)}\n          </span>\n          New Deaths Today\n          <span className=\"country-data-numbers color-new-death\">\n            {nf.format(country.todayDeaths)}\n          </span>\n        </div>\n        <div>\n          Recovered\n          <span className=\"country-data-numbers color-recovered\">\n            {nf.format(country.recovered)}\n          </span>\n          New Recovered Today\n          <span className=\"country-data-numbers color-new-recoveries\">\n            {nf.format(country.todayRecovered)}\n          </span>\n        </div>\n        <div>\n          Active Cases\n          <span className=\"country-data-numbers color-active\">\n            {nf.format(country.active)}\n          </span>\n          Tests\n          <span className=\"country-data-numbers color-tests\">\n            {nf.format(country.tests)}\n          </span>\n        </div>\n        <div>\n          Population\n          <span className=\"country-data-numbers color-affected\">\n            {nf.format(country.population)}\n          </span>\n          Critical\n          <span className=\"country-data-numbers color-critical\">\n            {nf.format(country.critical)}\n          </span>\n        </div>\n      </section>\n    </article>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Loading from 'react-loading';\nimport * as Chart from 'chart.js';\nimport api from '../../services/api';\n\nimport CountryData from '../../components/CountryDetailsCard';\n\nimport './style.css';\n\nexport default function Country() {\n  const { country_code: countryCode } = useParams();\n  const [isPageLoaded, setIsPageLoaded] = useState(false);\n  const [isTimeLineDataLoaded, setIsTimeLineDataLoaded] = useState(false);\n  const [country, setCountry] = useState([]);\n  const [countryTimeline, setCountryTimeline] = useState([]);\n\n  // Get Country Timeline\n  useEffect(() => {\n    const loadCountryTimeLine = async () => {\n      const response = await api.get(`/country_timeline/${countryCode}`);\n      setCountryTimeline(response.data.timeline);\n      setIsTimeLineDataLoaded(true);\n    };\n\n    loadCountryTimeLine();\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Get Country Data\n  useEffect(() => {\n    const loadCountryData = async () => {\n      const response = await api.get(`/country/${countryCode}`);\n      setCountry(response.data);\n      setIsPageLoaded(true);\n    };\n\n    loadCountryData();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Mount graph cases\n  useEffect(() => {\n    if (isPageLoaded && isTimeLineDataLoaded) {\n      const timelinedates = [];\n      const timelinedataCases = [];\n      const timelinedataDeaths = [];\n      const timelinedataRecovered = [];\n\n      Object.keys(countryTimeline.cases).forEach(key => {\n        timelinedates.push(key);\n        timelinedataCases.push(countryTimeline.cases[key]);\n      });\n\n      Object.keys(countryTimeline.deaths).forEach(key => {\n        timelinedataDeaths.push(countryTimeline.deaths[key]);\n      });\n\n      Object.keys(countryTimeline.recovered).forEach(key => {\n        timelinedataRecovered.push(countryTimeline.recovered[key]);\n      });\n\n      const cav = document\n        .getElementById(`cav_cases_${countryCode}`)\n        .getContext('2d');\n      new Chart(cav, {\n        type: 'line',\n        options: {\n          tooltips: {\n            mode: 'index',\n            intersect: false,\n          },\n          legend: {\n            labels: {\n              fontColor: 'white',\n            },\n          },\n          scales: {\n            yAxes: [\n              {\n                ticks: {\n                  fontColor: 'white',\n                },\n              },\n            ],\n            xAxes: [\n              {\n                ticks: {\n                  fontColor: 'white',\n                },\n              },\n            ],\n          },\n        },\n        data: {\n          labels: timelinedates,\n          // labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n          datasets: [\n            {\n              label: 'Total Cases',\n              fill: false,\n              lineTension: 0.1,\n              backgroundColor: 'rgba(14, 233, 203,0.4)',\n              borderColor: '#0ee9cb',\n              borderCapStyle: 'butt',\n              borderDash: [],\n              borderDashOffset: 0.0,\n              borderJoinStyle: 'miter',\n              pointBorderColor: '#0ee9cb',\n              pointBackgroundColor: '#0ee9cb',\n              pointBorderWidth: 1,\n              pointHoverRadius: 5,\n              pointHoverBackgroundColor: '#0ee9cb',\n              pointHoverBorderColor: 'rgba(220,220,220,1)',\n              pointHoverBorderWidth: 2,\n              pointRadius: 2,\n              pointHitRadius: 5,\n              data: timelinedataCases.map(item => item),\n            },\n            {\n              label: 'Total Recovered',\n              fill: false,\n              lineTension: 0.1,\n              backgroundColor: 'rgba(52, 127, 213,0.4)',\n              borderColor: '#347fd5',\n              borderCapStyle: 'butt',\n              borderDash: [],\n              borderDashOffset: 0.0,\n              borderJoinStyle: 'miter',\n              pointBorderColor: '#347fd5',\n              pointBackgroundColor: '#347fd5',\n              pointBorderWidth: 1,\n              pointHoverRadius: 5,\n              pointHoverBackgroundColor: '#347fd5',\n              pointHoverBorderColor: 'rgba(220,220,220,1)',\n              pointHoverBorderWidth: 2,\n              pointRadius: 2,\n              pointHitRadius: 5,\n              data: timelinedataRecovered.map(item => item),\n            },\n            {\n              label: 'Total Deaths',\n              fill: false,\n              lineTension: 0.1,\n              backgroundColor: 'rgba(243, 83, 83,0.4)',\n              borderColor: '#f35353',\n              borderCapStyle: 'butt',\n              borderDash: [],\n              borderDashOffset: 0.0,\n              borderJoinStyle: 'miter',\n              pointBorderColor: '#f35353',\n              pointBackgroundColor: '#f35353',\n              pointBorderWidth: 1,\n              pointHoverRadius: 5,\n              pointHoverBackgroundColor: '#f35353',\n              pointHoverBorderColor: 'rgba(220,220,220,1)',\n              pointHoverBorderWidth: 2,\n              pointRadius: 2,\n              pointHitRadius: 5,\n              data: timelinedataDeaths.map(item => item),\n            },\n          ],\n        },\n      });\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isPageLoaded, isTimeLineDataLoaded]);\n\n  // Mount pie cases\n  useEffect(() => {\n    if (isPageLoaded && isTimeLineDataLoaded) {\n      const timelinedates = [];\n      const timelinedata = [];\n\n      Object.keys(countryTimeline).forEach(key => {\n        timelinedates.push(key);\n        timelinedata.push(countryTimeline[key]);\n      });\n\n      const cav = document.getElementById(`pie_cases`).getContext('2d');\n      new Chart(cav, {\n        type: 'pie',\n        options: {\n          legend: {\n            labels: {\n              fontColor: 'white',\n            },\n          },\n        },\n        data: {\n          labels: [\n            // \"World Population\",\n            'Active',\n            'Recovered',\n            'Death',\n          ],\n          datasets: [\n            {\n              backgroundColor: [\n                // \"#3e95cd\",\n                '#ffc137',\n                '#347fd5',\n                '#f35353',\n              ],\n              data: [\n                // globalData.population,\n                country.active,\n                country.recovered,\n                country.deaths,\n              ],\n            },\n          ],\n        },\n      });\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isPageLoaded, isTimeLineDataLoaded]);\n\n  // Mount pie tests\n  useEffect(() => {\n    if (isPageLoaded && isTimeLineDataLoaded) {\n      const timelinedates = [];\n      const timelinedata = [];\n\n      Object.keys(countryTimeline).forEach(key => {\n        timelinedates.push(key);\n        timelinedata.push(countryTimeline[key]);\n      });\n\n      const cav = document.getElementById(`pie_tests`).getContext('2d');\n      new Chart(cav, {\n        type: 'pie',\n        options: {\n          legend: {\n            labels: {\n              fontColor: 'white',\n            },\n          },\n        },\n        data: {\n          labels: [`${country.country} population`, 'Tests'],\n          datasets: [\n            {\n              backgroundColor: [\n                // \"#3e95cd\",\n                '#da8213',\n                '#6bfb31',\n              ],\n              data: [\n                // globalData.population,\n                country.population,\n                country.tests,\n              ],\n            },\n          ],\n        },\n      });\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isPageLoaded, isTimeLineDataLoaded]);\n\n  return !isPageLoaded ? (\n    <div className=\"loading\">\n      <Loading type=\"bars\" color=\"#eee\" />\n    </div>\n  ) : (\n    <div className=\"container-fluid\">\n      <div className=\"row\">\n        <div className=\"col-12\">\n          <CountryData country={country} />\n        </div>\n        <div className=\"col-8\">\n          <section className=\" chart-div\">\n            <h2>Timeline Cases and Deaths</h2>\n            <canvas\n              className=\"mt-4\"\n              height=\"164px\"\n              id={`cav_cases_${countryCode}`}\n            />\n          </section>\n        </div>\n        <div className=\"col-4\">\n          <div className=\"col-12\">\n            <section className=\"chart-div\">\n              <h2>{country.country} Active, Deaths and Recovered</h2>\n              <canvas className=\"mt-4\" id=\"pie_cases\" />\n            </section>\n          </div>\n          <div className=\"col-12\">\n            <section className=\"chart-div\">\n              <h2>{country.country} Population / Tests</h2>\n              <canvas className=\"mt-4\" id=\"pie_tests\" />\n            </section>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './styles.css';\nimport rootpath from '../../services/getRootPath';\n\nimport logo from '../../assets/logo.png';\n\nconst Header = () => (\n  <div id=\"main-header\">\n    <Link to={rootpath} className=\"title-brand\">\n      <img src={logo} alt=\"Covid Dashboard\" className=\"logo\" />\n      DASHBOARD\n      <div className=\"blob red\" />\n    </Link>\n    <nav className=\"my-2 my-md-0 mr-md-3\">\n      <Link to={rootpath} className=\"p-2 text-white\">\n        Features\n      </Link>\n    </nav>\n    {/* <a class=\"btn btn-outline-primary\" href=\"#\">Sign up</a> */}\n  </div>\n);\n\nexport default Header;\n","import React from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\n\nimport Main from './pages/Main';\nimport Country from './pages/Country';\nimport Header from './components/Header';\n\nimport rootpath from './services/getRootPath';\n\nexport default function Routes() {\n  return (\n    <BrowserRouter>\n      <Route path={rootpath} component={Header} />\n      <Route exact path={rootpath} component={Main} />\n      <Route exact path={`${rootpath}:country_code`} component={Country} />\n    </BrowserRouter>\n  );\n}\n","import React from 'react';\nimport Routes from './routes';\n\nimport './styles.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nconst App = () => (\n  <div className=\"App\">\n    <Routes />\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}