{"version":3,"sources":["services/api.js","components/ActiveGlobalCaseChart/index.js","components/Global/index.js","pages/main/index.js","pages/product/index.js","routes.js","components/Header/index.js","App.js","serviceWorker.js","index.js"],"names":["api","axios","create","baseURL","ActiveGlobalCaseChart","state","globaldata","loadGlobalData","a","this","clearInterval","interval","className","src","id","Component","GlobalData","get","response","results","data","setState","setInterval","countryDatas","props","dataFromParent","total_cases","total_deaths","total_recovered","total_active_cases","total_new_cases_today","total_new_deaths_today","Main","products","loadProducts","verificar","stateAtual","compare","compareObjects","countryChecker","countryReturnTest","Object","values","countryitems","sort","comparer","otherArray","current","filter","other","length","onlyInA","onlyInB","result","concat","keys","constructor","console","log","b","totalCasesA","totalCasesB","comparison","map","product","key","ourid","code","alt","title","Product","match","params","description","href","url","Routes","exact","path","component","Header","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","rel","integrity","crossOrigin","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.67d50109.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst api = axios.create({ baseURL: \"https://api.thevirustracker.com\" })\n\nexport default api","import React, { Component } from 'react'\nimport api from '../../services/api'\n\n\nimport './styles.css'\n\nexport default class ActiveGlobalCaseChart extends Component {\n    state = {\n        globaldata: [],\n    }\n\n    componentDidMount() {\n        this.loadGlobalData(0)\n        // this.interval = setInterval(() => { this.loadGlobalData() }, 5000);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval)\n    }\n\n    loadGlobalData = async () => {\n        // const response = await api.get(`/free-api?global=stats`)\n        // const { results } = response.data\n\n\n        // this.setState({ globaldata: results[0] })\n    }\n\n\n\n    render() {\n        // const { globaldata } = this.state\n\n        return (\n            <div className=\"active-global-case-chart\">\n                <script src=\"https://cdn.jsdelivr.net/npm/chart.js@2.8.0\"></script>\n                <canvas id=\"myChart\"></canvas>\n            </div>\n\n        )\n    }\n}","import React, { Component } from 'react'\nimport api from '../../services/api'\nimport ActiveGlobalCaseChart from '../../components/ActiveGlobalCaseChart'\n\n\nimport './styles.css'\n\nexport default class GlobalData extends Component {\n    state = {\n        globaldata: [],\n    }\n\n    componentDidMount() {\n        this.loadGlobalData(0)\n        this.interval = setInterval(() => { this.loadGlobalData() }, 5000);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval)\n    }\n\n    loadGlobalData = async () => {\n        const response = await api.get(`/free-api?global=stats`)\n        const { results } = response.data\n\n\n        this.setState({ globaldata: results[0] })\n    }\n\n\n\n    render() {\n        const { globaldata } = this.state\n\n        return (\n            <div>\n                <ActiveGlobalCaseChart countryDatas={this.props.dataFromParent} />\n                <article className=\"global-article shadow\">\n                    <div className=\"row\">\n                        <div className=\"col font-weight-bold text-center\">Casos</div>\n                        <div className=\"col font-weight-bold text-center\">Mortes</div>\n                        <div className=\"col font-weight-bold text-center\">Recuperados</div>\n                        <div className=\"col font-weight-bold text-center\">Casos ativos</div>\n                        <div className=\"col font-weight-bold text-center\">Novos casos hoje</div>\n                        <div className=\"col font-weight-bold text-center\">Mortes hoje</div>\n                        <div className=\"w-100\"></div>\n                        <div className=\"col font-weight-bold text-center\">{globaldata.total_cases}</div>\n                        <div className=\"col text-center\">{globaldata.total_deaths}</div>\n                        <div className=\"col text-center\">{globaldata.total_recovered}</div>\n                        <div className=\"col text-center\">{globaldata.total_active_cases}</div>\n                        <div className=\"col text-center\">{globaldata.total_new_cases_today}</div>\n                        <div className=\"col text-center\">{globaldata.total_new_deaths_today}</div>\n                    </div>\n                    <div>\n                        {/* <button className='btn btn-info' onClick={this.createNotification('info')}>Info</button>\n                    <hr />\n                    <button className='btn btn-success' onClick={this.createNotification('success')}>Success</button>\n                    <hr />\n                    <button className='btn btn-warning' onClick={this.createNotification('warning')}>Warning</button>\n                    <hr />\n                    <button className='btn btn-danger' onClick={this.createNotification('error')}>Error</button> */}\n                    </div>\n                </article>\n            </div>\n\n        )\n    }\n}","import React, { Component } from 'react'\nimport api from '../../services/api'\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\nimport '../../../node_modules/react-notifications/lib/notifications.css';\n//import { Link } from 'react-router-dom'\n\nimport GlobalData from '../../components/Global'\n\nimport './styles.css'\n\nexport default class Main extends Component {\n    state = {\n        products: [],\n    }\n\n    componentDidMount() {\n        this.loadProducts()\n        this.interval = setInterval(() => { this.loadProducts(true, this.state.products) }, 5000);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n\n    loadProducts = async (verificar, stateAtual) => {\n        const response = await api.get(`/free-api?countryTotals=ALL`)\n        const { countryitems } = response.data\n\n        function compare(a, b) {\n            const totalCasesA = a.total_cases\n            const totalCasesB = b.total_cases\n\n            let comparison = 0;\n            if (totalCasesA < totalCasesB) {\n                comparison = 1;\n            } else if (totalCasesA > totalCasesB) {\n                comparison = -1;\n            }\n            return comparison;\n        }\n\n        // this.createNotification('warning')\n        // NotificationManager.warning('Warning message', 'Close after 3000ms', 0);\n\n        function compareObjects(stateAtual) {\n            function createNotification(type, code, title, body = null) {\n                switch (type) {\n                    case 'info':\n                        NotificationManager.info('Atualizado global', null, 1000);\n                        break;\n                    case 'success':\n                        NotificationManager.success('Success message', 'Title here', 1000);\n                        break;\n                    case 'warning':\n                        NotificationManager.warning(<img src={'https://www.countryflags.io/' + code + '/flat/64.png'} alt=\"\" />, title, 0);\n                        break;\n                    default:\n                        NotificationManager.error('Error message', 'Click me!', 0, () => {\n                            alert('callback');\n                        });\n                        break;\n                }\n            };\n\n            var countryChecker = stateAtual\n            var countryReturnTest = Object.values(countryitems[0]).sort(compare)\n\n            function comparer(otherArray) {\n                return function (current) {\n                    return otherArray.filter(function (other) {\n                        return other.total_cases === current.total_cases &&\n                            other.total_recovered === current.total_recovered &&\n                            other.total_deaths === current.total_deaths\n                    }).length === 0;\n                }\n            }\n\n            var onlyInA = countryChecker.filter(comparer(countryReturnTest));\n            var onlyInB = countryReturnTest.filter(comparer(countryChecker));\n\n            var result = onlyInA.concat(onlyInB);\n\n            //Verifica se teve alguma modifica��o\n            if (Object.keys(result).length !== 0 && result.constructor === Array) {\n                // createNotification('warning', 'US', 'USA');\n            }\n\n            // console.log(countryChecker[1].total_cases)\n            // createNotification('warning', countryChecker[1].code)\n            console.log(result)\n\n            // OUTRO MODO DE FAZER\n            // const result1 = countryChecker.filter(\n            //     ({ value: value1, display: display1 }) => !countryReturnTest.some(({ value: value2, display: display2 }) => value2 === value1 && display2 === display1)\n            // ); \n\n            // const result2 = countryReturnTest.filter(\n            //     ({ value: value1, display: display1 }) => !countryChecker.some(({ value: value2, display: display2 }) => value2 === value1 && display2 === display1)\n            // );\n\n            // var results = result1.concat(result2);\n            // console.log(results);\n        }\n\n        if (verificar === true) {\n            compareObjects(stateAtual)\n        }\n\n\n        this.setState({ products: Object.values(countryitems[0]).sort(compare) })\n    }\n\n    render() {\n        const { products } = this.state\n\n        return (\n            <div className=\"container-fluid\">\n                <NotificationContainer />\n                <div className=\"container\">\n                    <GlobalData dataFromParent={products} />\n                </div>\n                <div className=\"row justify-content-md-center\">\n                    {products.map(product => (\n                        <div className=\"col-lg-4\">\n                            <article className=\"pais-article shadow\" key={product.ourid}>\n                                <div className=\"row justify-content-center\">\n                                    <div className=\"col-3\">\n                                        <div className=\"row\">\n                                            <div className=\"col my-auto\">\n                                                <div className=\"bandeira text-center\">\n                                                    <img src={\"https://www.countryflags.io/\" + product.code + \"/flat/64.png\"} alt={\"Bandeira \" + product.title} />\n                                                </div>\n                                                <div className=\"font-weight-bold text-center\">{product.title}</div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div className=\"col my-auto\">\n                                        <div className=\"row\">\n                                            {/* <div className=\"col font-weight-bold text-center\">Pais</div> */}\n                                            <div className=\"col font-weight-bold text-center\">Casos</div>\n                                            <div className=\"col font-weight-bold text-center\">Mortes</div>\n                                            <div className=\"col font-weight-bold text-center\">Recuperados</div>\n                                        </div>\n                                        <div className=\"row\">\n                                            <div className=\"col text-center text-primary\">{product.total_cases}</div>\n                                            <div className=\"col text-center text-danger\">{product.total_deaths}</div>\n                                            <div className=\"col text-center text-success\">{product.total_recovered}</div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </article>\n                        </div >\n                    ))\n                    }\n                </div >\n            </div >\n        )\n    }\n}","import React, { Component } from 'react'\nimport api from '../../services/api'\n\nimport './styles.css'\nexport default class Product extends Component {\n    state = {\n        product: {},\n    }\n\n    async componentDidMount() {\n        const { id } = this.props.match.params\n        const response = await api.get(`/products/${id}`)\n\n        this.setState({ product: response.data })\n    }\n\n    render() {\n        const { product } = this.state\n\n        return (\n            <div className=\"product-info\">\n                <h1>{product.title}</h1>\n                <p>{product.description}</p>\n                <p>URL: <a href={product.url}>{product.url}</a></p>\n            </div>\n        )\n    }\n}","import React from 'react'\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\n\nimport Main from './pages/main'\nimport Product from './pages/product'\n\nconst Routes = () => (\n    <BrowserRouter>\n        <Switch>\n            <Route exact path=\"/\" component={Main} />\n            <Route path=\"/products/:id\" component={Product} />\n        </Switch>\n    </BrowserRouter>\n)\n\nexport default Routes","import React from 'react'\nimport './styles.css'\n\n\nconst Header = () => (\n    <header id=\"main-header\">DASHBOARD</header>\n)\n\nexport default Header","import React from 'react';\nimport Routes from './routes'\n\nimport './styles.css'\n\nimport Header from './components/Header'\n//import Main from './pages/main'\n\n\nconst App = () => (\n  <div className=\"App\">\n    <Header />\n    <Routes />\n  </div >\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossOrigin=\"anonymous\"></link>\n    <script src=\"https://code.jquery.com/jquery-3.4.1.slim.min.js\" integrity=\"sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n\" crossOrigin=\"anonymous\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js\" integrity=\"sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo\" crossOrigin=\"anonymous\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js\" integrity=\"sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6\" crossOrigin=\"anonymous\"></script>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}