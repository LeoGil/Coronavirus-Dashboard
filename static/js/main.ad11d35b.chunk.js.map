{"version":3,"sources":["services/api.js","components/Global/index.js","pages/main/index.js","pages/product/index.js","routes.js","components/Header/index.js","App.js","serviceWorker.js","index.js"],"names":["api","axios","create","baseURL","GlobalData","state","globaldata","loadGlobalData","a","get","response","results","data","setState","this","interval","setInterval","clearInterval","className","total_cases","total_deaths","total_recovered","total_active_cases","total_new_cases_today","total_new_deaths_today","Component","Main","products","loadProducts","verificar","stateAtual","compare","b","totalCasesA","totalCasesB","comparison","countryitems","Object","values","sort","map","product","key","ourid","src","code","alt","title","Product","id","props","match","params","description","href","url","Routes","exact","path","component","Header","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","rel","integrity","crossOrigin","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ad11d35b.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst api = axios.create({ baseURL: \"https://api.thevirustracker.com\" })\n\nexport default api","import React, { Component } from 'react'\nimport api from '../../services/api'\n\n\nimport './styles.css'\n\nexport default class GlobalData extends Component {\n    state = {\n        globaldata: [],\n    }\n\n    componentDidMount() {\n        this.loadGlobalData(0)\n        this.interval = setInterval(() => { this.loadGlobalData() }, 5000);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval)\n    }\n\n    loadGlobalData = async () => {\n        const response = await api.get(`/free-api?global=stats`)\n        const { results } = response.data\n\n\n        this.setState({ globaldata: results[0] })\n    }\n\n\n\n    render() {\n        const { globaldata } = this.state\n\n        return (\n            <article className=\"global-article shadow\">\n                <div className=\"row\">\n                    <div className=\"col font-weight-bold text-center\">Casos</div>\n                    <div className=\"col font-weight-bold text-center\">Mortes</div>\n                    <div className=\"col font-weight-bold text-center\">Recuperados</div>\n                    <div className=\"col font-weight-bold text-center\">Casos ativos</div>\n                    <div className=\"col font-weight-bold text-center\">Novos casos hoje</div>\n                    <div className=\"col font-weight-bold text-center\">Mortes hoje</div>\n                    <div className=\"w-100\"></div>\n                    <div className=\"col font-weight-bold text-center\">{globaldata.total_cases}</div>\n                    <div className=\"col text-center\">{globaldata.total_deaths}</div>\n                    <div className=\"col text-center\">{globaldata.total_recovered}</div>\n                    <div className=\"col text-center\">{globaldata.total_active_cases}</div>\n                    <div className=\"col text-center\">{globaldata.total_new_cases_today}</div>\n                    <div className=\"col text-center\">{globaldata.total_new_deaths_today}</div>\n                </div>\n                <div>\n                    {/* <button className='btn btn-info' onClick={this.createNotification('info')}>Info</button>\n                    <hr />\n                    <button className='btn btn-success' onClick={this.createNotification('success')}>Success</button>\n                    <hr />\n                    <button className='btn btn-warning' onClick={this.createNotification('warning')}>Warning</button>\n                    <hr />\n                    <button className='btn btn-danger' onClick={this.createNotification('error')}>Error</button> */}\n                </div>\n            </article>\n\n        )\n    }\n}","import React, { Component } from 'react'\nimport api from '../../services/api'\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\nimport '../../../node_modules/react-notifications/lib/notifications.css';\n//import { Link } from 'react-router-dom'\n\nimport GlobalData from '../../components/Global'\n\nimport './styles.css'\n\nexport default class Main extends Component {\n    state = {\n        products: [],\n    }\n\n    componentDidMount() {\n        this.loadProducts()\n        this.interval = setInterval(() => { this.loadProducts(true, this.state.products) }, 5000);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n\n    loadProducts = async (verificar, stateAtual) => {\n        const response = await api.get(`/free-api?countryTotals=ALL`)\n        const { countryitems } = response.data\n\n        function compare(a, b) {\n            const totalCasesA = a.total_cases\n            const totalCasesB = b.total_cases\n\n            let comparison = 0;\n            if (totalCasesA < totalCasesB) {\n                comparison = 1;\n            } else if (totalCasesA > totalCasesB) {\n                comparison = -1;\n            }\n            return comparison;\n        }\n\n        // this.createNotification('warning')\n        // NotificationManager.warning('Warning message', 'Close after 3000ms', 0);\n\n        // function compareObjects(stateAtual) {\n        //     function createNotification(type, code, title, body = null) {\n        //         switch (type) {\n        //             case 'info':\n        //                 NotificationManager.info('Atualizado global', null, 1000);\n        //                 break;\n        //             case 'success':\n        //                 NotificationManager.success('Success message', 'Title here', 1000);\n        //                 break;\n        //             case 'warning':\n        //                 NotificationManager.warning(<img src={'https://www.countryflags.io/' + code + '/flat/64.png'} />, title, 0);\n        //                 break;\n        //             default:\n        //                 NotificationManager.error('Error message', 'Click me!', 0, () => {\n        //                     alert('callback');\n        //                 });\n        //                 break;\n        //         }\n        //     };\n\n        //     var countryChecker = stateAtual\n        //     var countryReturnTest = Object.values(countryitems[0]).sort(compare)\n\n        //     function comparer(otherArray) {\n        //         return function (current) {\n        //             return otherArray.filter(function (other) {\n        //                 return other.total_cases === current.total_cases &&\n        //                     other.total_recovered === current.total_recovered &&\n        //                     other.total_deaths === current.total_deaths\n        //             }).length === 0;\n        //         }\n        //     }\n\n        //     var onlyInA = countryChecker.filter(comparer(countryReturnTest));\n        //     var onlyInB = countryReturnTest.filter(comparer(countryChecker));\n\n        //     var result = onlyInA.concat(onlyInB);\n\n        //     //Verifica se teve alguma modifica��o\n        //     if (Object.keys(result).length !== 0 && result.constructor === Array) {\n        //         createNotification('warning', 'US', 'USA');\n        //     }\n\n        //     // console.log(countryChecker[1].total_cases)\n        //     // createNotification('warning', countryChecker[1].code)\n        //     console.log(result)\n\n        //     // OUTRO MODO DE FAZER\n        //     // const result1 = countryChecker.filter(\n        //     //     ({ value: value1, display: display1 }) => !countryReturnTest.some(({ value: value2, display: display2 }) => value2 === value1 && display2 === display1)\n        //     // ); \n\n        //     // const result2 = countryReturnTest.filter(\n        //     //     ({ value: value1, display: display1 }) => !countryChecker.some(({ value: value2, display: display2 }) => value2 === value1 && display2 === display1)\n        //     // );\n\n        //     // var results = result1.concat(result2);\n        //     // console.log(results);\n        // }\n\n        // if (verificar === true) {\n        //     compareObjects(stateAtual)\n        // }\n\n        this.setState({ products: Object.values(countryitems[0]).sort(compare) })\n    }\n\n    render() {\n        const { products } = this.state\n\n        return (\n            <div className=\"container-fluid\">\n                <NotificationContainer />\n                <div className=\"container\">\n                    <GlobalData />\n                </div>\n                <div className=\"row justify-content-md-center\">\n                    {products.map(product => (\n                        <div className=\"col-lg-4\">\n                            <article className=\"pais-article shadow\" key={product.ourid}>\n                                <div className=\"row justify-content-center\">\n                                    <div className=\"col-3\">\n                                        <div className=\"row\">\n                                            <div className=\"col my-auto\">\n                                                <div className=\"bandeira text-center\">\n                                                    <img src={\"https://www.countryflags.io/\" + product.code + \"/flat/64.png\"} alt={\"Bandeira \" + product.title} />\n                                                </div>\n                                                <div className=\"font-weight-bold text-center\">{product.title}</div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div className=\"col my-auto\">\n                                        <div className=\"row\">\n                                            {/* <div className=\"col font-weight-bold text-center\">Pais</div> */}\n                                            <div className=\"col font-weight-bold text-center\">Casos</div>\n                                            <div className=\"col font-weight-bold text-center\">Mortes</div>\n                                            <div className=\"col font-weight-bold text-center\">Recuperados</div>\n                                        </div>\n                                        <div className=\"row\">\n                                            <div className=\"col text-center\">{product.total_cases}</div>\n                                            <div className=\"col text-center\">{product.total_deaths}</div>\n                                            <div className=\"col text-center\">{product.total_recovered}</div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </article>\n                        </div >\n                    ))\n                    }\n                </div >\n            </div >\n        )\n    }\n}","import React, { Component } from 'react'\nimport api from '../../services/api'\n\nimport './styles.css'\nexport default class Product extends Component {\n    state = {\n        product: {},\n    }\n\n    async componentDidMount() {\n        const { id } = this.props.match.params\n        const response = await api.get(`/products/${id}`)\n\n        this.setState({ product: response.data })\n    }\n\n    render() {\n        const { product } = this.state\n\n        return (\n            <div className=\"product-info\">\n                <h1>{product.title}</h1>\n                <p>{product.description}</p>\n                <p>URL: <a href={product.url}>{product.url}</a></p>\n            </div>\n        )\n    }\n}","import React from 'react'\n// import { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport { HashRouter, Switch, Route } from 'react-router-dom'\n\nimport Main from './pages/main'\nimport Product from './pages/product'\n\nconst Routes = () => (\n    <HashRouter>\n        <Switch>\n            <Route exact path=\"/\" component={Main} />\n            <Route path=\"/products/:id\" component={Product} />\n        </Switch>\n    </HashRouter>\n)\n\nexport default Routes","import React from 'react'\nimport './styles.css'\n\n\nconst Header = () => (\n    <header id=\"main-header\">DASHBOARD</header>\n)\n\nexport default Header","import React from 'react';\nimport Routes from './routes'\n\nimport './styles.css'\n\nimport Header from './components/Header'\n//import Main from './pages/main'\n\n\nconst App = () => (\n  <div className=\"App\">\n    <Header />\n    <Routes />\n  </div >\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossOrigin=\"anonymous\"></link>\n    <script src=\"https://code.jquery.com/jquery-3.4.1.slim.min.js\" integrity=\"sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n\" crossOrigin=\"anonymous\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js\" integrity=\"sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo\" crossOrigin=\"anonymous\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js\" integrity=\"sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6\" crossOrigin=\"anonymous\"></script>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}