{"version":3,"sources":["assets/logo.png","services/api.js","components/GlobalCard/index.js","services/getRootPath.js","components/CountryCard/index.js","pages/main/index.js","components/CountryDetailsCard/index.js","pages/country/index.js","components/Header/index.js","routes.js","App.js","index.js"],"names":["module","exports","api","axios","create","baseURL","GlobalData","globaldata","nf","Intl","NumberFormat","className","format","cases","todayCases","deaths","todayDeaths","recovered","todayRecovered","active","tests","affectedCountries","critical","rootpath","CountryCard","country","iso2","to","src","toLowerCase","alt","Main","useState","countries","setCountries","globalData","setGlobalData","isPageLoaded","setIsPageLoaded","lastUpdatedSeconds","setLastUpdatedSeconds","updatePageCount","setUpdatePageCount","timelineGlobal","setTimelineGlobal","chartLoaded","setChartLoaded","useEffect","loadCountryData","a","get","response","data","Object","values","loadGlobalData","interval","setInterval","clearInterval","then","timelinedates","timelinedataCases","timelinedataDeaths","timelinedataRecovered","keys","forEach","key","push","cav","document","getElementById","getContext","Chart","type","options","tooltips","mode","intersect","legend","labels","fontColor","scales","yAxes","ticks","xAxes","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","map","item","cavPie","color","height","id","data_map","CountryDetailsCard","population","Country","country_code","useParams","isTimeLineDataLoaded","setIsTimeLineDataLoaded","setCountry","countryTimeline","setCountryTimeline","timeline","loadCountryTimeLine","console","log","chart","timelinedata","teste","Header","logo","Routes","path","component","exact","App","ReactDOM","render","StrictMode"],"mappings":"wHAAAA,EAAOC,QAAU,IAA0B,kC,yTCK5BC,E,OAFHC,EAAMC,OAAO,CAAEC,QAD0D,4C,+CCEtE,SAASC,EAAT,GAAqC,IAAfC,EAAc,EAAdA,WAC3BC,EAAK,IAAIC,KAAKC,aAEpB,OACI,oCACI,wBAAIC,UAAU,gCAAd,eACA,6BAASA,UAAU,kBACf,6BAASA,UAAU,SACf,yBAAKA,UAAU,wBAAf,QAEI,0BAAMA,UAAU,mCAAmCH,EAAGI,OAAOL,EAAWM,QAF5E,kBAII,0BAAMF,UAAU,sCAAsCH,EAAGI,OAAOL,EAAWO,cAE/E,yBAAKH,UAAU,wBAAf,SAEI,0BAAMA,UAAU,mCAAmCH,EAAGI,OAAOL,EAAWQ,SAF5E,mBAII,0BAAMJ,UAAU,uCAAuCH,EAAGI,OAAOL,EAAWS,eAEhF,yBAAKL,UAAU,wBAAf,YAEI,0BAAMA,UAAU,uCAAuCH,EAAGI,OAAOL,EAAWU,YAFhF,uBAII,0BAAMN,UAAU,4CAA4CH,EAAGI,OAAOL,EAAWW,kBAErF,yBAAKP,UAAU,wBAAf,eAEI,0BAAMA,UAAU,oCAAoCH,EAAGI,OAAOL,EAAWY,SAF7E,QAII,0BAAMR,UAAU,mCAAmCH,EAAGI,OAAOL,EAAWa,SAE5E,yBAAKT,UAAU,wBAAf,qBAEI,0BAAMA,UAAU,sCAAsCH,EAAGI,OAAOL,EAAWc,oBAF/E,YAII,0BAAMV,UAAU,sCAAsCH,EAAGI,OAAOL,EAAWe,e,UCvCpFC,EADkD,0BCI3Df,EAAK,IAAIC,KAAKC,aAEL,SAASc,EAAT,GAAmC,IAAZC,EAAW,EAAXA,QAIlC,OAHAA,EAAQC,KAA4B,eAApBD,EAAQA,QAA2B,KAAOA,EAAQC,KAClED,EAAQC,KAA4B,qBAApBD,EAAQA,QAAiC,KAAOA,EAAQC,KAGpE,yBAAKf,UAAU,YACX,kBAAC,IAAD,CAAMgB,GAAE,UAAKJ,GAAL,OAAgBE,EAAQC,MAAQf,UAAU,iBAC9C,6BAASA,UAAU,uBACf,4BAAQA,UAAU,YACd,yBAAKA,UAAU,SAASiB,IAAK,gCAAmCH,EAAQC,KAAMG,cAAgB,OAAQC,IAAK,YAAcL,EAAQA,UACjI,gCAAYd,UAAU,sCAAsCc,EAAQA,UAExE,6BAASd,UAAU,SACf,qCAEQ,0BAAMA,UAAU,eAAeH,EAAGI,OAAOa,EAAQZ,QACpDY,EAAQX,WAAa,GAAK,0BAAMH,UAAU,yBAAhB,IAA0CH,EAAGI,OAAOa,EAAQX,cAE3F,sCAEQ,0BAAMH,UAAU,eAAeH,EAAGI,OAAOa,EAAQV,SACpDU,EAAQT,YAAc,GAAK,0BAAML,UAAU,yBAAhB,IAA0CH,EAAGI,OAAOa,EAAQT,eAE5F,yCAEQ,0BAAML,UAAU,mBAAmBH,EAAGI,OAAOa,EAAQR,YACxDQ,EAAQP,eAAiB,GAAK,0BAAMP,UAAU,6BAAhB,IAA8CH,EAAGI,OAAOa,EAAQP,kBAEnG,4CAEQ,0BAAMP,UAAU,gBAAgBH,EAAGI,OAAOa,EAAQN,c,MCtBnE,SAASY,IAAQ,IAAD,EACOC,mBAAS,IADhB,mBACpBC,EADoB,KACTC,EADS,OAESF,mBAAS,IAFlB,mBAEpBG,EAFoB,KAERC,EAFQ,OAGaJ,oBAAS,GAHtB,mBAGpBK,EAHoB,KAGNC,EAHM,OAIyBN,mBAAS,GAJlC,mBAIpBO,EAJoB,KAIAC,EAJA,OAKmBR,mBAAS,GAL5B,mBAKpBS,EALoB,KAKHC,EALG,OAMiBV,qBANjB,mBAMpBW,EANoB,KAMJC,EANI,OAOWZ,oBAAS,GAPpB,mBAOpBa,EAPoB,KAOPC,EAPO,KA0N3B,OA/MAC,qBAAU,WAEN,IAAMC,EAAe,uCAAG,4BAAAC,EAAA,sEACG/C,EAAIgD,IAAJ,cADH,QACdC,EADc,QAGXC,KAAOC,OAAOC,OAAOH,EAASC,MAEvClB,EAAaiB,EAASC,MACtBN,GAAe,GANK,2CAAH,qDASfS,EAAc,uCAAG,4BAAAN,EAAA,sEACI/C,EAAIgD,IAAJ,WADJ,OACbC,EADa,OAEnBf,EAAce,EAASC,MACvBN,GAAe,GAHI,2CAAH,qDAKpBE,IACAO,MAED,CAACd,IAGJM,qBAAU,WACN,IAAIS,EAAW,KAWf,OAVInB,IACAmB,EAAWC,aAAY,WACnBjB,GAAsB,SAAAD,GAAkB,OAAIA,EAAqB,KAC7DA,EAAqB,KAAO,GAA4B,IAAvBA,IACjCG,GAAmB,SAAAD,GAAe,OAAIA,EAAkB,KACxDD,EAAsB,MAE3B,MAGA,kBAAMkB,cAAcF,MAC5B,CAACnB,EAAcE,IAElBQ,qBAAU,WACN7C,EAAIgD,IAAJ,oBAA4BS,MAAK,SAAAR,GAC7BP,EAAkBO,EAASC,MAC3Bd,GAAgB,GAChBQ,GAAe,QAGpB,IAEHC,qBAAU,WACN,IAAqB,IAAjBV,IAAyC,IAAhBQ,EAAsB,CAC/C,IAAIe,EAAgB,GAChBC,EAAoB,GACpBC,EAAqB,GACrBC,EAAwB,GAE5BV,OAAOW,KAAKrB,EAAe9B,OAAOoD,SAAQ,SAAAC,GACtCN,EAAcO,KAAKD,GACnBL,EAAkBM,KAAKxB,EAAe9B,MAAMqD,OAGhDb,OAAOW,KAAKrB,EAAe5B,QAAQkD,SAAQ,SAAAC,GACvCJ,EAAmBK,KAAKxB,EAAe5B,OAAOmD,OAGlDb,OAAOW,KAAKrB,EAAe1B,WAAWgD,SAAQ,SAAAC,GAC1CH,EAAsBI,KAAKxB,EAAe1B,UAAUiD,OAGxD,IAAIE,EAAMC,SAASC,eAAT,mBAA2CC,WAAW,MAChE,IAAIC,EAAMJ,EAAK,CACXK,KAAM,OACNC,QAAS,CACLC,SAAU,CACNC,KAAM,QACNC,WAAW,GAEfC,OAAQ,CACJC,OAAQ,CACJC,UAAW,UAGnBC,OAAQ,CACJC,MAAO,CAAC,CACJC,MAAO,CACHH,UAAW,WAGnBI,MAAO,CAAC,CACJD,MAAO,CACHH,UAAW,aAM3B5B,KAAM,CACF2B,OAAQnB,EACRyB,SAAU,CACN,CACIC,MAAO,cACPC,MAAM,EACNC,YAAa,GACbC,gBAAiB,yBACjBC,YAAa,UACbC,eAAgB,OAChBC,WAAY,GACZC,iBAAkB,EAClBC,gBAAiB,QACjBC,iBAAkB,UAClBC,qBAAsB,UACtBC,iBAAkB,EAClBC,iBAAkB,EAClBC,0BAA2B,UAC3BC,sBAAuB,sBACvBC,sBAAuB,EACvBC,YAAa,EACbC,eAAgB,EAChBnD,KAAMS,EAAkB2C,KAAI,SAAAC,GAAI,OAC5BA,MAGR,CACInB,MAAO,kBACPC,MAAM,EACNC,YAAa,GACbC,gBAAiB,yBACjBC,YAAa,UACbC,eAAgB,OAChBC,WAAY,GACZC,iBAAkB,EAClBC,gBAAiB,QACjBC,iBAAkB,UAClBC,qBAAsB,UACtBC,iBAAkB,EAClBC,iBAAkB,EAClBC,0BAA2B,UAC3BC,sBAAuB,sBACvBC,sBAAuB,EACvBC,YAAa,EACbC,eAAgB,EAChBnD,KAAMW,EAAsByC,KAAI,SAAAC,GAAI,OAChCA,MAGR,CACInB,MAAO,eACPC,MAAM,EACNC,YAAa,GACbC,gBAAiB,wBACjBC,YAAa,UACbC,eAAgB,OAChBC,WAAY,GACZC,iBAAkB,EAClBC,gBAAiB,QACjBC,iBAAkB,UAClBC,qBAAsB,UACtBC,iBAAkB,EAClBC,iBAAkB,EAClBC,0BAA2B,UAC3BC,sBAAuB,sBACvBC,sBAAuB,EACvBC,YAAa,EACbC,eAAgB,EAChBnD,KAAMU,EAAmB0C,KAAI,SAAAC,GAAI,OAC7BA,UAOpB,IAAIC,EAASrC,SAASC,eAAT,eACb,IAAIE,EAAMkC,EAAQ,CACdjC,KAAM,MACNrB,KAAM,CACF2B,OAAQ,CAEJ,SACA,YACA,SAEJM,SAAU,CAAC,CACPI,gBAAiB,CAEb,UACA,UACA,WAEJrC,KAAM,CAEFjB,EAAWhB,OACXgB,EAAWlB,UACXkB,EAAWpB,WAIvB2D,QAAS,CACLI,OAAQ,CACJC,OAAQ,CACJC,UAAW,gBAOhC,CAAC3C,EAAcQ,EAAaF,EAAgBR,KAGvB,IAAjBE,EAEC,yBAAK1B,UAAU,WACX,kBAAC,IAAD,CAAS8D,KAAM,OAAQkC,MAAO,UAIlC,yBAAKhG,UAAU,mBAEX,kBAAC,wBAAD,MAEA,yBAAKA,UAAU,OACX,yBAAKA,UAAU,SACX,6BAASA,UAAU,aACf,wBAAIA,UAAU,cAAd,+CACA,4BAAQA,UAAU,OAAOiG,OAAO,QAAQC,GAAE,sBAGlD,yBAAKlG,UAAU,SACX,6BAASA,UAAU,aACf,wBAAIA,UAAU,cAAd,6CACA,4BAAQA,UAAU,OAAOiG,OAAO,QAAQC,GAAG,mBAIvD,kBAAC,EAAD,CAAYtG,WAAY4B,IAExB,yBAAKxB,UAAU,iCACX,yBAAKA,UAAU,UACX,wBAAIA,UAAU,2CAAd,mBAEHsB,EAAUuE,KAAI,SAAAM,GAAQ,OACnB,kBAACtF,EAAD,CACI0C,IAAK4C,EAASrF,QACdA,QAASqF,S,UCxQ/BtG,EAAK,IAAIC,KAAKC,aAEL,SAASqG,EAAT,GAA0C,IAAZtF,EAAW,EAAXA,QAI3C,OAHAA,EAAQC,KAA4B,eAApBD,EAAQA,QAA2B,KAAOA,EAAQC,KAClED,EAAQC,KAA4B,qBAApBD,EAAQA,QAAiC,KAAOA,EAAQC,KAGtE,6BAASf,UAAU,wBACjB,4BAAQA,UAAU,YAChB,yBAAKiB,IAAK,gCAAmCH,EAAQC,KAAMG,cAAgB,OAAQC,IAAK,YAAcL,EAAQA,UAC9G,oCAAaA,EAAQA,UAEvB,6BAASd,UAAU,SACjB,qCAEE,0BAAMA,UAAU,oCACbH,EAAGI,OAAOa,EAAQZ,QAHvB,kBAME,0BAAMF,UAAU,uCACbH,EAAGI,OAAOa,EAAQX,cAGvB,sCAEE,0BAAMH,UAAU,oCACbH,EAAGI,OAAOa,EAAQV,SAHvB,mBAME,0BAAMJ,UAAU,wCACbH,EAAGI,OAAOa,EAAQT,eAGvB,yCAEE,0BAAML,UAAU,wCACbH,EAAGI,OAAOa,EAAQR,YAHvB,sBAME,0BAAMN,UAAU,6CACbH,EAAGI,OAAOa,EAAQP,kBAGvB,4CAEE,0BAAMP,UAAU,qCACbH,EAAGI,OAAOa,EAAQN,SAHvB,QAME,0BAAMR,UAAU,oCACbH,EAAGI,OAAOa,EAAQL,SAGvB,0CAEE,0BAAMT,UAAU,uCACbH,EAAGI,OAAOa,EAAQuF,aAHvB,WAME,0BAAMrG,UAAU,uCACbH,EAAGI,OAAOa,EAAQH,c,MCpDhB,SAAS2F,IAAW,IACvBC,EAAiBC,cAAjBD,aADsB,EAEUlF,oBAAS,GAFnB,mBAEvBK,EAFuB,KAETC,EAFS,OAG0BN,oBAAS,GAHnC,mBAGvBoF,EAHuB,KAGDC,EAHC,OAIArF,mBAAS,IAJT,mBAIvBP,EAJuB,KAId6F,EAJc,OAKgBtF,mBAAS,IALzB,mBAKvBuF,EALuB,KAKNC,EALM,KAmQ9B,OA3PAzE,qBAAU,YACmB,uCAAG,4BAAAE,EAAA,sEACD/C,EAAIgD,IAAJ,4BAA6BgE,IAD5B,OAClB/D,EADkB,OAExBqE,EAAmBrE,EAASC,KAAKqE,UACjCJ,GAAwB,GAHA,2CAAH,qDAMzBK,KAGD,IAGH3E,qBAAU,YACe,uCAAG,4BAAAE,EAAA,sEACG/C,EAAIgD,IAAJ,mBAAoBgE,IADvB,OACd/D,EADc,OAEpBmE,EAAWnE,EAASC,MACpBd,GAAgB,GAHI,2CAAH,qDAMrBU,KAED,IAGHD,qBAAU,WACN,GAAIV,GAAgB+E,EAAsB,CACtC,IAAIxD,EAAgB,GAChBC,EAAoB,GACpBC,EAAqB,GACrBC,EAAwB,GAC5B4D,QAAQC,IAAIL,GAEZlE,OAAOW,KAAKuD,EAAgB1G,OAAOoD,SAAQ,SAAAC,GACvCN,EAAcO,KAAKD,GACnBL,EAAkBM,KAAKoD,EAAgB1G,MAAMqD,OAGjDb,OAAOW,KAAKuD,EAAgBxG,QAAQkD,SAAQ,SAAAC,GACxCJ,EAAmBK,KAAKoD,EAAgBxG,OAAOmD,OAGnDb,OAAOW,KAAKuD,EAAgBtG,WAAWgD,SAAQ,SAAAC,GAC3CH,EAAsBI,KAAKoD,EAAgBtG,UAAUiD,OAGzD,IAAIE,EAAMC,SAASC,eAAT,oBAAqC4C,IAAgB3C,WAAW,MAC1E,IAAIsD,EAAMzD,EAAK,CACXK,KAAM,OACNC,QAAS,CACLC,SAAU,CACNC,KAAM,QACNC,WAAW,GAEfC,OAAQ,CACJC,OAAQ,CACJC,UAAW,UAGnBC,OAAQ,CACJC,MAAO,CAAC,CACJC,MAAO,CACHH,UAAW,WAGnBI,MAAO,CAAC,CACJD,MAAO,CACHH,UAAW,aAK3B5B,KAAM,CACF2B,OAAQnB,EAERyB,SAAU,CACN,CACIC,MAAO,cACPC,MAAM,EACNC,YAAa,GACbC,gBAAiB,yBACjBC,YAAa,UACbC,eAAgB,OAChBC,WAAY,GACZC,iBAAkB,EAClBC,gBAAiB,QACjBC,iBAAkB,UAClBC,qBAAsB,UACtBC,iBAAkB,EAClBC,iBAAkB,EAClBC,0BAA2B,UAC3BC,sBAAuB,sBACvBC,sBAAuB,EACvBC,YAAa,EACbC,eAAgB,EAChBnD,KAAMS,EAAkB2C,KAAI,SAAAC,GAAI,OAC5BA,MAGR,CACInB,MAAO,kBACPC,MAAM,EACNC,YAAa,GACbC,gBAAiB,yBACjBC,YAAa,UACbC,eAAgB,OAChBC,WAAY,GACZC,iBAAkB,EAClBC,gBAAiB,QACjBC,iBAAkB,UAClBC,qBAAsB,UACtBC,iBAAkB,EAClBC,iBAAkB,EAClBC,0BAA2B,UAC3BC,sBAAuB,sBACvBC,sBAAuB,EACvBC,YAAa,EACbC,eAAgB,EAChBnD,KAAMW,EAAsByC,KAAI,SAAAC,GAAI,OAChCA,MAGR,CACInB,MAAO,eACPC,MAAM,EACNC,YAAa,GACbC,gBAAiB,wBACjBC,YAAa,UACbC,eAAgB,OAChBC,WAAY,GACZC,iBAAkB,EAClBC,gBAAiB,QACjBC,iBAAkB,UAClBC,qBAAsB,UACtBC,iBAAkB,EAClBC,iBAAkB,EAClBC,0BAA2B,UAC3BC,sBAAuB,sBACvBC,sBAAuB,EACvBC,YAAa,EACbC,eAAgB,EAChBnD,KAAMU,EAAmB0C,KAAI,SAAAC,GAAI,OAC7BA,aAUzB,CAACpE,EAAc+E,IAGlBrE,qBAAU,WACN,GAAIV,GAAgB+E,EAAsB,CACtC,IAAIxD,EAAgB,GAChBkE,EAAe,GAEnBzE,OAAOW,KAAKuD,GAAiBtD,SAAQ,SAAAC,GACjCN,EAAcO,KAAKD,GACnB4D,EAAa3D,KAAKoD,EAAgBrD,OAGtC,IAAIE,EAAMC,SAASC,eAAT,aAAqCC,WAAW,MAC1D,IAAIsD,EAAMzD,EAAK,CACXK,KAAM,MACNC,QAAS,CACLI,OAAQ,CACJC,OAAQ,CACJC,UAAW,WAIvB5B,KAAM,CACF2B,OAAQ,CAEJ,SACA,YACA,SAEJM,SAAU,CAAC,CACPI,gBAAiB,CAEb,UACA,UACA,WAEJrC,KAAM,CAEF3B,EAAQN,OACRM,EAAQR,UACRQ,EAAQV,gBAS7B,CAACsB,EAAc+E,IAGlBrE,qBAAU,WACN,GAAIV,GAAgB+E,EAAsB,CACtC,IAAIxD,EAAgB,GAChBkE,EAAe,GAEnBzE,OAAOW,KAAKuD,GAAiBtD,SAAQ,SAAAC,GACjCN,EAAcO,KAAKD,GACnB4D,EAAa3D,KAAKoD,EAAgBrD,OAItC,IAAIE,EAAMC,SAASC,eAAT,aAAqCC,WAAW,MACpDwD,EAAQ,IAAIF,EAAMzD,EAAK,CACzBK,KAAM,MACNC,QAAS,CACLI,OAAQ,CACJC,OAAQ,CACJC,UAAW,WAIvB5B,KAAM,CACF2B,OAAQ,CAAC,GAAD,OACDtD,EAAQA,QADP,eAEJ,SAEJ4D,SAAU,CAAC,CACPI,gBAAiB,CAEb,UACA,WAEJrC,KAAM,CAEF3B,EAAQuF,WACRvF,EAAQL,YAKxBuG,QAAQC,IAAIG,MAIjB,CAAC1F,EAAc+E,IAEV/E,EAOA,yBAAK1B,UAAU,mBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,UACX,kBAAC,EAAD,CAAac,QAASA,KAE1B,yBAAKd,UAAU,SACX,6BAASA,UAAU,cACf,yDACA,4BAAQA,UAAU,OAAOiG,OAAO,QAAQC,GAAE,oBAAeK,OAGjE,yBAAKvG,UAAU,SACX,yBAAKA,UAAU,UACX,6BAASA,UAAU,aACf,4BAAKc,EAAQA,QAAb,iCACA,4BAAQd,UAAU,OAAOkG,GAAG,gBAGpC,yBAAKlG,UAAU,UACX,6BAASA,UAAU,aACf,4BAAKc,EAAQA,QAAb,uBACA,4BAAQd,UAAU,OAAOkG,GAAG,mBA1BhD,yBAAKlG,UAAU,WACX,kBAAC,IAAD,CAAS8D,KAAM,OAAQkC,MAAO,U,2BCvP/BqB,EAlBA,kBACb,yBAAKnB,GAAG,eACN,kBAAC,IAAD,CAAMlF,GAAIJ,EAAUZ,UAAU,eAC5B,yBACEiB,IAAKqG,IACLnG,IAAI,kBACJnB,UAAU,SAJd,YAOM,yBAAKA,UAAU,cAErB,yBAAKA,UAAU,wBACb,kBAAC,IAAD,CAAMgB,GAAIJ,EAAUZ,UAAU,kBAA9B,eCVS,SAASuH,IACtB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAM5G,EAAU6G,UAAWJ,IAClC,kBAAC,IAAD,CAAOK,OAAK,EAACF,KAAM5G,EAAU6G,UAAWrG,IACxC,kBAAC,IAAD,CAAOsG,OAAK,EAACF,KAAI,UAAK5G,EAAL,iBAA8B6G,UAAWnB,K,gBCDjDqB,EANH,kBACV,yBAAK3H,UAAU,OACb,kBAACuH,EAAD,QCLJK,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFpE,SAASC,eAAe,W","file":"static/js/main.22c4d736.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.fa1e2a0b.png\";","import axios from 'axios'\n\nconst api_route = process.env.NODE_ENV === 'development' ? 'http://localhost:3333' : 'https://apicoviddashboard.herokuapp.com'\nconst api = axios.create({ baseURL: api_route })\n\nexport default api","import React from 'react';\n\nimport './styles.css';\n\nexport default function GlobalData({ globaldata }) {\n    const nf = new Intl.NumberFormat();\n\n    return (\n        <>\n            <h1 className=\"text-center title-components\">Global Data</h1>\n            <article className=\"global-article\">\n                <section className=\"cases\">\n                    <div className=\"global-data-title t1\">\n                        Cases\n                        <span className=\"global-data-numbers color-cases\">{nf.format(globaldata.cases)}</span>\n                        New cases today\n                        <span className=\"global-data-numbers color-new-case\">{nf.format(globaldata.todayCases)}</span>\n                    </div>\n                    <div className=\"global-data-title t2\">\n                        Deaths\n                        <span className=\"global-data-numbers color-death\">{nf.format(globaldata.deaths)}</span>\n                        New deaths today\n                        <span className=\"global-data-numbers color-new-death\">{nf.format(globaldata.todayDeaths)}</span>\n                    </div>\n                    <div className=\"global-data-title t3\">\n                        Recovered\n                        <span className=\"global-data-numbers color-recovered\">{nf.format(globaldata.recovered)}</span>\n                        New recoveries today\n                        <span className=\"global-data-numbers color-new-recoveries\">{nf.format(globaldata.todayRecovered)}</span>\n                    </div>\n                    <div className=\"global-data-title t4\">\n                        Active cases\n                        <span className=\"global-data-numbers color-active\">{nf.format(globaldata.active)}</span>\n                        Tests\n                        <span className=\"global-data-numbers color-tests\">{nf.format(globaldata.tests)}</span>\n                    </div>\n                    <div className=\"global-data-title t5\">\n                        Countries affected\n                        <span className=\"global-data-numbers color-affected\">{nf.format(globaldata.affectedCountries)}</span>\n                        Criticals\n                        <span className=\"global-data-numbers color-critical\">{nf.format(globaldata.critical)}</span>\n                    </div>\n                </section>\n                {/* <section>\n                    <button className='btn btn-info' onClick={this.createNotification('info')}>Info</button>\n                    <hr />\n                    <button className='btn btn-success' onClick={this.createNotification('success')}>Success</button>\n                    <hr />\n                    <button className='btn btn-warning' onClick={this.createNotification('warning')}>Warning</button>\n                    <hr />\n                    <button className='btn btn-danger' onClick={this.createNotification('error')}>Error</button>\n                </section> */}\n            </article>\n        </>\n    )\n}","const rootpath = (process.env.NODE_ENV === 'development' ? '/' : '/Coronavirus-Dashboard/');\nexport default rootpath;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './styles.css'\nimport rootpath from '../../services/getRootPath';\nconst nf = new Intl.NumberFormat();\n\nexport default function CountryCard({ country }) {\n    country.iso2 = (country.country === 'MS Zaandam' ? 'US' : country.iso2)\n    country.iso2 = (country.country === 'Diamond Princess' ? 'US' : country.iso2)\n\n    return (\n        <div className=\"col-lg-4\">\n            <Link to={`${rootpath}${country.iso2}`} className=\"unstyled-link\">\n                <article className=\"pais-article shadow\">\n                    <figure className=\"bandeira\">\n                        <img className=\"shadow\" src={\"https://cdn.u21.io/flags/4x3/\" + (country.iso2).toLowerCase() + \".svg\"} alt={\"Bandeira \" + country.country} />\n                        <figcaption className=\"text-bold font-smaller text-center\">{country.country}</figcaption>\n                    </figure>\n                    <section className=\"cases\">\n                        <div>\n                            Cases\n                                <span className=\"color-cases\">{nf.format(country.cases)}</span>\n                            {country.todayCases > 0 && <span className=\"color-cases new-today\">+{nf.format(country.todayCases)}</span>}\n                        </div>\n                        <div>\n                            Deaths\n                                <span className=\"color-death\">{nf.format(country.deaths)}</span>\n                            {country.todayDeaths > 0 && <span className=\"color-death new-today\">+{nf.format(country.todayDeaths)}</span>}\n                        </div>\n                        <div>\n                            Recovered\n                                <span className=\"color-recovered\">{nf.format(country.recovered)}</span>\n                            {country.todayRecovered > 0 && <span className=\"color-recovered new-today\">+{nf.format(country.todayRecovered)}</span>}\n                        </div>\n                        <div>\n                            Active Cases\n                                <span className=\"color-active\">{nf.format(country.active)}</span>\n                        </div>\n                    </section>\n                </article>\n            </Link>\n        </div >\n    )\n}","import React, { useEffect, useState } from 'react'\nimport api from '../../services/api'\nimport { NotificationContainer } from 'react-notifications';\n//NotificationManager\nimport 'react-notifications/lib/notifications.css';\nimport Loading from 'react-loading';\n\nimport * as Chart from 'chart.js'\n\nimport GlobalCard from '../../components/GlobalCard'\nimport CountryCard from '../../components/CountryCard'\n\nimport './style.css';\n\nexport default function Main() {\n    const [countries, setCountries] = useState([]);\n    const [globalData, setGlobalData] = useState([]);\n    const [isPageLoaded, setIsPageLoaded] = useState(false);\n    const [lastUpdatedSeconds, setLastUpdatedSeconds] = useState(0);\n    const [updatePageCount, setUpdatePageCount] = useState(0);\n    const [timelineGlobal, setTimelineGlobal] = useState();\n    const [chartLoaded, setChartLoaded] = useState(false);\n\n\n    //Get Country Data\n    useEffect(() => {\n\n        const loadCountryData = async () => {\n            const response = await api.get(`/countries`);\n\n            response.data = Object.values(response.data)\n\n            setCountries(response.data);\n            setChartLoaded(false)\n        }\n\n        const loadGlobalData = async () => {\n            const response = await api.get(`/global`);\n            setGlobalData(response.data);\n            setChartLoaded(false)\n        }\n        loadCountryData();\n        loadGlobalData();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [updatePageCount]);\n\n\n    useEffect(() => {\n        let interval = null\n        if (isPageLoaded) {\n            interval = setInterval(() => {\n                setLastUpdatedSeconds(lastUpdatedSeconds => lastUpdatedSeconds + 1);\n                if (lastUpdatedSeconds % 10 === 0 && lastUpdatedSeconds !== 0) {\n                    setUpdatePageCount(updatePageCount => updatePageCount + 1);\n                    setLastUpdatedSeconds(0);\n                }\n            }, 1000);\n        }\n\n        return () => clearInterval(interval);\n    }, [isPageLoaded, lastUpdatedSeconds]);\n\n    useEffect(() => {\n        api.get(`/global_timeline`).then(response => {\n            setTimelineGlobal(response.data);\n            setIsPageLoaded(true);\n            setChartLoaded(true)\n        });\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(() => {\n        if (isPageLoaded === true && chartLoaded === true) {\n            let timelinedates = [];\n            let timelinedataCases = [];\n            let timelinedataDeaths = [];\n            let timelinedataRecovered = [];\n\n            Object.keys(timelineGlobal.cases).forEach(key => {\n                timelinedates.push(key);\n                timelinedataCases.push(timelineGlobal.cases[key])\n            })\n\n            Object.keys(timelineGlobal.deaths).forEach(key => {\n                timelinedataDeaths.push(timelineGlobal.deaths[key])\n            })\n\n            Object.keys(timelineGlobal.recovered).forEach(key => {\n                timelinedataRecovered.push(timelineGlobal.recovered[key])\n            })\n\n            let cav = document.getElementById(`global_timeline`).getContext('2d');\n            new Chart(cav, {\n                type: 'line',\n                options: {\n                    tooltips: {\n                        mode: 'index',\n                        intersect: false,\n                    },\n                    legend: {\n                        labels: {\n                            fontColor: 'white'\n                        }\n                    },\n                    scales: {\n                        yAxes: [{\n                            ticks: {\n                                fontColor: 'white'\n                            },\n                        }],\n                        xAxes: [{\n                            ticks: {\n                                fontColor: 'white'\n                            },\n                        }]\n                    },\n                },\n\n                data: {\n                    labels: timelinedates,\n                    datasets: [\n                        {\n                            label: 'Total Cases',\n                            fill: false,\n                            lineTension: 0.1,\n                            backgroundColor: 'rgba(14, 233, 203,0.4)',\n                            borderColor: '#0ee9cb',\n                            borderCapStyle: 'butt',\n                            borderDash: [],\n                            borderDashOffset: 0.0,\n                            borderJoinStyle: 'miter',\n                            pointBorderColor: '#0ee9cb',\n                            pointBackgroundColor: '#0ee9cb',\n                            pointBorderWidth: 1,\n                            pointHoverRadius: 5,\n                            pointHoverBackgroundColor: '#0ee9cb',\n                            pointHoverBorderColor: 'rgba(220,220,220,1)',\n                            pointHoverBorderWidth: 2,\n                            pointRadius: 2,\n                            pointHitRadius: 5,\n                            data: timelinedataCases.map(item => (\n                                item\n                            ))\n                        },\n                        {\n                            label: 'Total Recovered',\n                            fill: false,\n                            lineTension: 0.1,\n                            backgroundColor: 'rgba(52, 127, 213,0.4)',\n                            borderColor: '#347fd5',\n                            borderCapStyle: 'butt',\n                            borderDash: [],\n                            borderDashOffset: 0.0,\n                            borderJoinStyle: 'miter',\n                            pointBorderColor: '#347fd5',\n                            pointBackgroundColor: '#347fd5',\n                            pointBorderWidth: 1,\n                            pointHoverRadius: 5,\n                            pointHoverBackgroundColor: '#347fd5',\n                            pointHoverBorderColor: 'rgba(220,220,220,1)',\n                            pointHoverBorderWidth: 2,\n                            pointRadius: 2,\n                            pointHitRadius: 5,\n                            data: timelinedataRecovered.map(item => (\n                                item\n                            )),\n                        },\n                        {\n                            label: 'Total Deaths',\n                            fill: false,\n                            lineTension: 0.1,\n                            backgroundColor: 'rgba(243, 83, 83,0.4)',\n                            borderColor: '#f35353',\n                            borderCapStyle: 'butt',\n                            borderDash: [],\n                            borderDashOffset: 0.0,\n                            borderJoinStyle: 'miter',\n                            pointBorderColor: '#f35353',\n                            pointBackgroundColor: '#f35353',\n                            pointBorderWidth: 1,\n                            pointHoverRadius: 5,\n                            pointHoverBackgroundColor: '#f35353',\n                            pointHoverBorderColor: 'rgba(220,220,220,1)',\n                            pointHoverBorderWidth: 2,\n                            pointRadius: 2,\n                            pointHitRadius: 5,\n                            data: timelinedataDeaths.map(item => (\n                                item\n                            )),\n                        }\n                    ]\n                },\n            })\n\n            let cavPie = document.getElementById(`global_area`)\n            new Chart(cavPie, {\n                type: 'pie',\n                data: {\n                    labels: [\n                        // \"World Population\",\n                        \"Active\",\n                        \"Recovered\",\n                        \"Death\"\n                    ],\n                    datasets: [{\n                        backgroundColor: [\n                            // \"#3e95cd\",\n                            \"#ffc137\",\n                            \"#347fd5\",\n                            \"#f35353\",\n                        ],\n                        data: [\n                            //globalData.population,\n                            globalData.active,\n                            globalData.recovered,\n                            globalData.deaths\n                        ]\n                    }]\n                },\n                options: {\n                    legend: {\n                        labels: {\n                            fontColor: 'white'\n                        }\n                    },\n                },\n\n            });\n        }\n    }, [isPageLoaded, chartLoaded, timelineGlobal, globalData]);\n\n\n    return isPageLoaded === false\n        ? (\n            <div className=\"loading\">\n                <Loading type={\"bars\"} color={\"#eee\"} />\n            </div>\n        )\n        : (\n            <div className=\"container-fluid\">\n\n                <NotificationContainer />\n\n                <div className=\"row\">\n                    <div className=\"col-8\">\n                        <section className=\"chart-div\">\n                            <h2 className=\"text-white\">Timeline Global Cases, Deaths and Recovered</h2>\n                            <canvas className=\"mt-4\" height=\"120px\" id={`global_timeline`} ></canvas>\n                        </section>\n                    </div>\n                    <div className=\"col-4\">\n                        <section className=\"chart-div\">\n                            <h2 className=\"text-white\">Global Active cases, Deaths and Recovered</h2>\n                            <canvas className=\"mt-4\" height=\"120px\" id=\"global_area\" ></canvas>\n                        </section>\n                    </div>\n                </div>\n                <GlobalCard globaldata={globalData} />\n\n                <div className=\"row justify-content-md-center\">\n                    <div className=\"col-12\">\n                        <h1 className=\"text-center text-white title-components\">Countries Data</h1>\n                    </div>\n                    {countries.map(data_map => (\n                        <CountryCard\n                            key={data_map.country}\n                            country={data_map} />\n                    ))}\n                </div >\n            </div >\n        )\n}","import React from 'react';\nimport './styles.css'\nconst nf = new Intl.NumberFormat();\n\nexport default function CountryDetailsCard({ country }) {\n  country.iso2 = (country.country === 'MS Zaandam' ? 'US' : country.iso2)\n  country.iso2 = (country.country === 'Diamond Princess' ? 'US' : country.iso2)\n\n  return (\n    <article className=\"pais-details-article\">\n      <figure className=\"bandeira\">\n        <img src={\"https://cdn.u21.io/flags/4x3/\" + (country.iso2).toLowerCase() + \".svg\"} alt={\"Bandeira \" + country.country} />\n        <figcaption>{country.country}</figcaption>\n      </figure>\n      <section className=\"cases\">\n        <div>\n          Cases\n          <span className=\"country-data-numbers color-cases\">\n            {nf.format(country.cases)}\n          </span>\n          New Cases Today\n          <span className=\"country-data-numbers color-new-case\">\n            {nf.format(country.todayCases)}\n          </span>\n        </div>\n        <div>\n          Deaths\n          <span className=\"country-data-numbers color-death\">\n            {nf.format(country.deaths)}\n          </span>\n          New Deaths Today\n          <span className=\"country-data-numbers color-new-death\">\n            {nf.format(country.todayDeaths)}\n          </span>\n        </div>\n        <div>\n          Recovered\n          <span className=\"country-data-numbers color-recovered\">\n            {nf.format(country.recovered)}\n          </span>\n          New Recovered Today\n          <span className=\"country-data-numbers color-new-recoveries\">\n            {nf.format(country.todayRecovered)}\n          </span>\n        </div>\n        <div>\n          Active Cases\n          <span className=\"country-data-numbers color-active\">\n            {nf.format(country.active)}\n          </span>\n          Tests\n          <span className=\"country-data-numbers color-tests\">\n            {nf.format(country.tests)}\n          </span>\n        </div>\n        <div>\n          Population\n          <span className=\"country-data-numbers color-affected\">\n            {nf.format(country.population)}\n          </span>\n          Critical\n          <span className=\"country-data-numbers color-critical\">\n            {nf.format(country.critical)}\n          </span>\n        </div>\n      </section>\n    </article>\n  )\n}","import React, { useEffect, useState } from 'react';\nimport { useParams } from \"react-router-dom\";\nimport api from '../../services/api';\nimport Loading from 'react-loading';\nimport * as chart from 'chart.js';\n\nimport CountryData from '../../components/CountryDetailsCard';\n\nimport './style.css';\n\nexport default function Country() {\n    const { country_code } = useParams();\n    const [isPageLoaded, setIsPageLoaded] = useState(false);\n    const [isTimeLineDataLoaded, setIsTimeLineDataLoaded] = useState(false);\n    const [country, setCountry] = useState([]);\n    const [countryTimeline, setCountryTimeline] = useState([]);\n\n    //Get Country Timeline\n    useEffect(() => {\n        const loadCountryTimeLine = async () => {\n            const response = await api.get(`/country_timeline/${country_code}`);\n            setCountryTimeline(response.data.timeline);\n            setIsTimeLineDataLoaded(true);\n        }\n\n        loadCountryTimeLine()\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    //Get Country Data\n    useEffect(() => {\n        const loadCountryData = async () => {\n            const response = await api.get(`/country/${country_code}`);\n            setCountry(response.data);\n            setIsPageLoaded(true);\n        }\n\n        loadCountryData()\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    //Mount graph cases\n    useEffect(() => {\n        if (isPageLoaded && isTimeLineDataLoaded) {\n            let timelinedates = [];\n            let timelinedataCases = [];\n            let timelinedataDeaths = [];\n            let timelinedataRecovered = [];\n            console.log(countryTimeline)\n\n            Object.keys(countryTimeline.cases).forEach(key => {\n                timelinedates.push(key);\n                timelinedataCases.push(countryTimeline.cases[key])\n            })\n\n            Object.keys(countryTimeline.deaths).forEach(key => {\n                timelinedataDeaths.push(countryTimeline.deaths[key])\n            })\n\n            Object.keys(countryTimeline.recovered).forEach(key => {\n                timelinedataRecovered.push(countryTimeline.recovered[key])\n            })\n\n            let cav = document.getElementById(`cav_cases_${country_code}`).getContext('2d');\n            new chart(cav, {\n                type: 'line',\n                options: {\n                    tooltips: {\n                        mode: 'index',\n                        intersect: false,\n                    },\n                    legend: {\n                        labels: {\n                            fontColor: 'white'\n                        }\n                    },\n                    scales: {\n                        yAxes: [{\n                            ticks: {\n                                fontColor: 'white'\n                            },\n                        }],\n                        xAxes: [{\n                            ticks: {\n                                fontColor: 'white'\n                            },\n                        }]\n                    },\n                },\n                data: {\n                    labels: timelinedates,\n                    //labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n                    datasets: [\n                        {\n                            label: 'Total Cases',\n                            fill: false,\n                            lineTension: 0.1,\n                            backgroundColor: 'rgba(14, 233, 203,0.4)',\n                            borderColor: '#0ee9cb',\n                            borderCapStyle: 'butt',\n                            borderDash: [],\n                            borderDashOffset: 0.0,\n                            borderJoinStyle: 'miter',\n                            pointBorderColor: '#0ee9cb',\n                            pointBackgroundColor: '#0ee9cb',\n                            pointBorderWidth: 1,\n                            pointHoverRadius: 5,\n                            pointHoverBackgroundColor: '#0ee9cb',\n                            pointHoverBorderColor: 'rgba(220,220,220,1)',\n                            pointHoverBorderWidth: 2,\n                            pointRadius: 2,\n                            pointHitRadius: 5,\n                            data: timelinedataCases.map(item => (\n                                item\n                            ))\n                        },\n                        {\n                            label: 'Total Recovered',\n                            fill: false,\n                            lineTension: 0.1,\n                            backgroundColor: 'rgba(52, 127, 213,0.4)',\n                            borderColor: '#347fd5',\n                            borderCapStyle: 'butt',\n                            borderDash: [],\n                            borderDashOffset: 0.0,\n                            borderJoinStyle: 'miter',\n                            pointBorderColor: '#347fd5',\n                            pointBackgroundColor: '#347fd5',\n                            pointBorderWidth: 1,\n                            pointHoverRadius: 5,\n                            pointHoverBackgroundColor: '#347fd5',\n                            pointHoverBorderColor: 'rgba(220,220,220,1)',\n                            pointHoverBorderWidth: 2,\n                            pointRadius: 2,\n                            pointHitRadius: 5,\n                            data: timelinedataRecovered.map(item => (\n                                item\n                            )),\n                        },\n                        {\n                            label: 'Total Deaths',\n                            fill: false,\n                            lineTension: 0.1,\n                            backgroundColor: 'rgba(243, 83, 83,0.4)',\n                            borderColor: '#f35353',\n                            borderCapStyle: 'butt',\n                            borderDash: [],\n                            borderDashOffset: 0.0,\n                            borderJoinStyle: 'miter',\n                            pointBorderColor: '#f35353',\n                            pointBackgroundColor: '#f35353',\n                            pointBorderWidth: 1,\n                            pointHoverRadius: 5,\n                            pointHoverBackgroundColor: '#f35353',\n                            pointHoverBorderColor: 'rgba(220,220,220,1)',\n                            pointHoverBorderWidth: 2,\n                            pointRadius: 2,\n                            pointHitRadius: 5,\n                            data: timelinedataDeaths.map(item => (\n                                item\n                            )),\n                        }\n                    ]\n                },\n            });\n\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [isPageLoaded, isTimeLineDataLoaded]);\n\n    //Mount pie cases\n    useEffect(() => {\n        if (isPageLoaded && isTimeLineDataLoaded) {\n            let timelinedates = [];\n            let timelinedata = [];\n\n            Object.keys(countryTimeline).forEach(key => {\n                timelinedates.push(key);\n                timelinedata.push(countryTimeline[key]);\n            })\n\n            let cav = document.getElementById(`pie_cases`).getContext('2d');\n            new chart(cav, {\n                type: 'pie',\n                options: {\n                    legend: {\n                        labels: {\n                            fontColor: 'white'\n                        }\n                    },\n                },\n                data: {\n                    labels: [\n                        // \"World Population\",\n                        \"Active\",\n                        \"Recovered\",\n                        \"Death\"\n                    ],\n                    datasets: [{\n                        backgroundColor: [\n                            // \"#3e95cd\",\n                            \"#ffc137\",\n                            \"#347fd5\",\n                            \"#f35353\",\n                        ],\n                        data: [\n                            //globalData.population,\n                            country.active,\n                            country.recovered,\n                            country.deaths\n                        ]\n                    }]\n                },\n            });\n\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [isPageLoaded, isTimeLineDataLoaded]);\n\n    //Mount pie tests\n    useEffect(() => {\n        if (isPageLoaded && isTimeLineDataLoaded) {\n            let timelinedates = [];\n            let timelinedata = [];\n\n            Object.keys(countryTimeline).forEach(key => {\n                timelinedates.push(key);\n                timelinedata.push(countryTimeline[key]);\n            })\n\n\n            let cav = document.getElementById(`pie_tests`).getContext('2d');\n            const teste = new chart(cav, {\n                type: 'pie',\n                options: {\n                    legend: {\n                        labels: {\n                            fontColor: 'white'\n                        }\n                    },\n                },\n                data: {\n                    labels: [\n                        `${country.country} population`,\n                        \"Tests\",\n                    ],\n                    datasets: [{\n                        backgroundColor: [\n                            // \"#3e95cd\",\n                            \"#da8213\",\n                            \"#6bfb31\",\n                        ],\n                        data: [\n                            //globalData.population,\n                            country.population,\n                            country.tests\n                        ]\n                    }]\n                },\n            });\n            console.log(teste)\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [isPageLoaded, isTimeLineDataLoaded]);\n\n    return !isPageLoaded\n        ? (\n            <div className=\"loading\">\n                <Loading type={\"bars\"} color={\"#eee\"} />\n            </div>\n        )\n        : (\n            <div className=\"container-fluid\">\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <CountryData country={country}/>\n                    </div>\n                    <div className=\"col-8\">\n                        <section className=\" chart-div\">\n                            <h2>Timeline Cases and Deaths</h2>\n                            <canvas className=\"mt-4\" height='164px' id={`cav_cases_${country_code}`} ></canvas>\n                        </section>\n                    </div>\n                    <div className=\"col-4\">\n                        <div className=\"col-12\">\n                            <section className=\"chart-div\">\n                                <h2>{country.country} Active, Deaths and Recovered</h2>\n                                <canvas className=\"mt-4\" id='pie_cases' ></canvas>\n                            </section>\n                        </div>\n                        <div className=\"col-12\">\n                            <section className=\"chart-div\">\n                                <h2>{country.country} Population / Tests</h2>\n                                <canvas className=\"mt-4\" id=\"pie_tests\" ></canvas>\n                            </section>\n                        </div>\n                    </div>\n                </div>\n            </div >\n        )\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './styles.css';\nimport rootpath from '../../services/getRootPath';\n\nimport logo from '../../assets/logo.png';\n\nconst Header = () => (\n  <div id=\"main-header\">\n    <Link to={rootpath} className=\"title-brand\">\n      <img\n        src={logo}\n        alt='Covid Dashboard'\n        className='logo'\n      />\n            DASHBOARD\n          <div className=\"blob red\"></div>\n    </Link>\n    <nav className=\"my-2 my-md-0 mr-md-3\">\n      <Link to={rootpath} className=\"p-2 text-white\">Features</Link>\n    </nav>\n    {/* <a class=\"btn btn-outline-primary\" href=\"#\">Sign up</a> */}\n  </div>\n)\n\nexport default Header","import React from 'react'\nimport { BrowserRouter, Route } from 'react-router-dom'\n\nimport Main from './pages/main'\nimport Country from './pages/country'\nimport Header from './components/Header'\n\nimport rootpath from './services/getRootPath';\n\nexport default function Routes() {\n  return (\n    <BrowserRouter>\n      <Route path={rootpath} component={Header} />\n      <Route exact path={rootpath} component={Main} />\n      <Route exact path={`${rootpath}:country_code`} component={Country} />\n    </BrowserRouter>\n  )\n}\n","import React from 'react';\nimport Routes from './routes'\n\nimport './styles.css'\nimport \"bootstrap/dist/css/bootstrap.css\";\n\n\nconst App = () => (\n  <div className=\"App\">\n    <Routes />\n  </div >\n)\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}